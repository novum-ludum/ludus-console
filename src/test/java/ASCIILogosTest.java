

//*******************************************************************************************
//*                         *AsciiLogosTest.java*                                           *
//*             ⚠ ⚠       !! DO NOT EDIT THIS FILE !!     ⚠⚠                                *
//*     This file is AUTOMATICALLY GENERATED by ASCIILogoGen/ASCIILogosTestGen.js           *
//*     please see the aforementioned file to edit this code!!                              *
//*     These are the tests for the ascii logos shown in                                    *
//*     the startup of the game.                                                            *
//*                                                                                         *
//*     source : https://www.patorjk.com/software/taag/#p=testall&font=Wet%20Letter&t=ludus *
//*                                                                                         *
//*                                                 ~ Generated from ASCIILogosTestGen.js   *
//*******************************************************************************************

import com.ludus.ASCIILogos;
import org.junit.Assert;
import org.junit.Test;
public class ASCIILogosTest{


@Test
public void TestONEROW()
{
    String expected = """
|_ |_| |) |_| _\\~ 
                  """;
    Assert.assertEquals(expected,ASCIILogos.ONEROW.getVal());
}


@Test
public void TestFOURMAX()
{
    String expected = """
88     88   88 8888b.  88   88 .dP\"Y8 
88     88   88  8I  Yb 88   88 `Ybo.\" 
88  .o Y8   8P  8I  dY Y8   8P o.`Y8b 
88ood8 `YbodP' 8888Y\"  `YbodP' 8bodP' """;
    Assert.assertEquals(expected,ASCIILogos.FOURMAX.getVal());
}


@Test
public void TestAMC_THREE_LINE()
{
    String expected = """
.   . . .-. . . .-. 
|   | | |  )| | `-. 
`-' `-' `-' `-' `-' 
                    """;
    Assert.assertEquals(expected,ASCIILogos.AMC_THREE_LINE.getVal());
}


@Test
public void TestAMC_THREE_LIVONE()
{
    String expected = """
     :. .:;S;:.  .:;:.  .:;S;:. .: S;:. 
      S       S S     S       S S  S  S 
`:;S;:' `:;S;:' `:;S;:' `:;S;:' `:;S :' 
                                        """;
    Assert.assertEquals(expected,ASCIILogos.AMC_THREE_LIVONE.getVal());
}


@Test
public void TestTHREEXFIVE()
{
    String expected = """
                    
#         #         
#   # # ### # #  ## 
#   # # # # # #  #  
#   ### ### ### ##  
###                 """;
    Assert.assertEquals(expected,ASCIILogos.THREEXFIVE.getVal());
}


@Test
public void TestAMC_RAZOR()
{
    String expected = """
            ___                     ___         ___   ___ 
  .'|      |   | |`.     .'|=|`.   |   | |`.   |   |=|_.' 
.'  |      |   | |  `. .'  | |  `. |   | |  `. `.  |      
|   |      |   | |   | |   | |   | |   | |   |   `.|=|`.  
|   |  ___ `.  | |   | |   | |  .' `.  | |   |  ___  |  `.
|___|=|_.'   `.|=|___| |___|=|.'     `.|=|___|  `._|=|___|
                                                          """;
    Assert.assertEquals(expected,ASCIILogos.AMC_RAZOR.getVal());
}


@Test
public void TestAMC_THIN()
{
    String expected = """
.-.     .-.   .-. .-..-.   .-.   .-. .-..-. 
| |     | |   | | | | ~.-. | |   | | | | ~  
| |     | |   | | | |  | | | |   | |  \\|    
| |     | |   | | | |  | | | |   | |    |\\  
| | __  | | _ | | | | _`-' | | _ | |  _ | | 
`-'`--' `-'`-'`-' `-'`-'   `-'`-'`-' `-'`-' 
                                            """;
    Assert.assertEquals(expected,ASCIILogos.AMC_THIN.getVal());
}


@Test
public void TestAMC_TUBES()
{
    String expected = """
d      d       b d ss    d       b   sss. 
S      S       S S   ~o  S       S d      
S      S       S S     b S       S Y      
S      S       S S     S S       S   ss.  
S      S       S S     P S       S      b 
S       S     S  S    S   S     S       P 
P sSSs   \"sss\"   P ss\"     \"sss\"   ` ss'  
                                          """;
    Assert.assertEquals(expected,ASCIILogos.AMC_TUBES.getVal());
}


@Test
public void TestAMC_SLIDER()
{
    String expected = """
                                                              
|        |         | |``````.  |         |             ..'''' 
|        |         | |       | |         |          .''       
|        |         | |       | |         |       ..'          
|_______ `._______.' |......'  `._______.' ....''             
                                                              """;
    Assert.assertEquals(expected,ASCIILogos.AMC_SLIDER.getVal());
}


@Test
public void TestAMC_UNTITLED()
{
    String expected = """
,'',                                          
;  ;                                          
;  ;     ,',  ,', ,'',,'',  ,',  ,', ,'',,'', 
;  ;     ; ;  ; ; ;  ;;   ; ; ;  ; ; ;  ;',,' 
;  ;     ; ;  ; ; ;  ;;   ; ; ;  ; ; ',,','', 
;  ;,'', ; ',,' ; ;  ;;   ; ; ',,' ; ,'',;  ; 
',,'',,' ',,'',,' ',,'',,'  ',,'',,' ',,'',,' 
                                              """;
    Assert.assertEquals(expected,ASCIILogos.AMC_UNTITLED.getVal());
}


@Test
public void TestASCII_NEW_ROMAN()
{
    String expected = """
 __,  _, _,____,_, _,____, 
(-|  (-|  (-|  (-|  (-(__  
 _|__,_|__/_|__/_|__/____) 
(    (    (    (    (      """;
    Assert.assertEquals(expected,ASCIILogos.ASCII_NEW_ROMAN.getVal());
}


@Test
public void TestALPHABET()
{
    String expected = """
L            d          
L            d          
L    u  u  ddd u  u  ss 
L    u  u d  d u  u  s  
LLLL  uuu  ddd  uuu ss  
                        
                        """;
    Assert.assertEquals(expected,ASCIILogos.ALPHABET.getVal());
}


@Test
public void TestBONEFF()
{
    String expected = """
|_|_||)|_|5""";
    Assert.assertEquals(expected,ASCIILogos.BONEFF.getVal());
}


@Test
public void TestAVATAR()
{
    String expected = """
 _     _     ____  _     ____ 
/ \\   / \\ /\\/  _ \\/ \\ /\\/ ___\\
| |   | | ||| | \\|| | |||    \\
| |_/\\| \\_/|| |_/|| \\_/|\\___ |
\\____/\\____/\\____/\\____/\\____/
                              """;
    Assert.assertEquals(expected,ASCIILogos.AVATAR.getVal());
}


@Test
public void TestBANNERTHREE()
{
    String expected = """
##       ##     ## ########  ##     ##  ######  
##       ##     ## ##     ## ##     ## ##    ## 
##       ##     ## ##     ## ##     ## ##       
##       ##     ## ##     ## ##     ##  ######  
##       ##     ## ##     ## ##     ##       ## 
##       ##     ## ##     ## ##     ## ##    ## 
########  #######  ########   #######   ######  """;
    Assert.assertEquals(expected,ASCIILogos.BANNERTHREE.getVal());
}


@Test
public void TestBANNERFOUR()
{
    String expected = """
.##.......##.....##.########..##.....##..######.
.##.......##.....##.##.....##.##.....##.##....##
.##.......##.....##.##.....##.##.....##.##......
.##.......##.....##.##.....##.##.....##..######.
.##.......##.....##.##.....##.##.....##.......##
.##.......##.....##.##.....##.##.....##.##....##
.########..#######..########...#######...######.""";
    Assert.assertEquals(expected,ASCIILogos.BANNERFOUR.getVal());
}


@Test
public void TestBENJAMIN()
{
    String expected = """
|_|_||)|_|_\\\"""";
    Assert.assertEquals(expected,ASCIILogos.BENJAMIN.getVal());
}


@Test
public void TestBELL()
{
    String expected = """
 .                _             
 /     ,   .   ___/ ,   .   ____
 |     |   |  /   | |   |  (    
 |     |   | ,'   | |   |  `--. 
 /---/ `._/| `___,' `._/| \\___.'
                  `             """;
    Assert.assertEquals(expected,ASCIILogos.BELL.getVal());
}


@Test
public void TestBIGFIG()
{
    String expected = """
               
|      _|    _ 
|__|_|(_||_|_> """;
    Assert.assertEquals(expected,ASCIILogos.BIGFIG.getVal());
}


@Test
public void TestBINARY()
{
    String expected = """
01001100 01110101 01100100 01110101 01110011 """;
    Assert.assertEquals(expected,ASCIILogos.BINARY.getVal());
}


@Test
public void TestBRACED()
{
    String expected = """
.-.   .-. .-..----. .-. .-. .----. 
} |   | } { |} {-. \\| } { |{ {__-` 
} '--.\\ `-' /} '-} /\\ `-' /.-._} } 
`----' `---' `----'  `---' `----'  
                                   """;
    Assert.assertEquals(expected,ASCIILogos.BRACED.getVal());
}


@Test
public void TestBROADWAY_KB()
{
    String expected = """
 _     _     ___   _     __  
| |   | | | | | \\ | | | ( (` 
|_|__ \\_\\_/ |_|_/ \\_\\_/ _)_) """;
    Assert.assertEquals(expected,ASCIILogos.BROADWAY_KB.getVal());
}


@Test
public void TestBRIGHT()
{
    String expected = """
.##......##..##..#####...##..##...####..
.##......##..##..##..##..##..##..##.....
.##......##..##..##..##..##..##...####..
.##......##..##..##..##..##..##......##.
.######...####...#####....####....####..
........................................""";
    Assert.assertEquals(expected,ASCIILogos.BRIGHT.getVal());
}


@Test
public void TestBULBHEAD()
{
    String expected = """
 __    __  __  ____  __  __  ___ 
(  )  (  )(  )(  _ \\(  )(  )/ __)
 )(__  )(__)(  )(_) ))(__)( \\__ \\
(____)(______)(____/(______)(___/""";
    Assert.assertEquals(expected,ASCIILogos.BULBHEAD.getVal());
}


@Test
public void TestCARDS()
{
    String expected = """
.------..------..------..------..------.
|L.--. ||U.--. ||D.--. ||U.--. ||S.--. |
| :/\\: || (\\/) || :/\\: || (\\/) || :/\\: |
| (__) || :\\/: || (__) || :\\/: || :\\/: |
| '--'L|| '--'U|| '--'D|| '--'U|| '--'S|
`------'`------'`------'`------'`------'""";
    Assert.assertEquals(expected,ASCIILogos.CARDS.getVal());
}


@Test
public void TestCALVIN_S()
{
    String expected = """
╦  ┬ ┬┌┬┐┬ ┬┌─┐
║  │ │ │││ │└─┐
╩═╝└─┘─┴┘└─┘└─┘""";
    Assert.assertEquals(expected,ASCIILogos.CALVIN_S.getVal());
}


@Test
public void TestCHUNKY()
{
    String expected = """
 _____            __              
|     |_.--.--.--|  |.--.--.-----.
|       |  |  |  _  ||  |  |__ --|
|_______|_____|_____||_____|_____|
                                  """;
    Assert.assertEquals(expected,ASCIILogos.CHUNKY.getVal());
}


@Test
public void TestCOMPUTER()
{
    String expected = """
8                             
8     e   e eeeee e   e eeeee 
8e    8   8 8   8 8   8 8   \" 
88    8e  8 8e  8 8e  8 8eeee 
88    88  8 88  8 88  8    88 
88eee 88ee8 88ee8 88ee8 8ee88 
                              """;
    Assert.assertEquals(expected,ASCIILogos.COMPUTER.getVal());
}


@Test
public void TestCOLA()
{
    String expected = """
         .-.                                
       ;' (_)               .'              
     .:'        ,  :   .-..'    ,  :      . 
    .:'        ;   ;  :   ;    ;   ;    .'; 
  .-:.    .-..'`..:;._`:::'`..'`..:;._.' .' 
 (_/ `;._.                           '      """;
    Assert.assertEquals(expected,ASCIILogos.COLA.getVal());
}


@Test
public void TestCONTESSA()
{
    String expected = """
.        .      
|   . . _|. . __
|___(_|(_](_|_) 
                """;
    Assert.assertEquals(expected,ASCIILogos.CONTESSA.getVal());
}


@Test
public void TestCOSMIKE()
{
    String expected = """
 :::      ...    ::::::::::-.   ...    ::: .::::::. 
 ;;;      ;;     ;;; ;;,   `';, ;;     ;;;;;;`    ` 
 [[[     [['     [[[ `[[     [[[['     [[['[==/[[[[,
 $$'     $$      $$$  $$,    $$$$      $$$  '''    $
o88oo,.__88    .d888  888_,o8P'88    .d888 88b    dP
\"\"\"\"YUMMM \"YmmMMMM\"\"  MMMMP\"`   \"YmmMMMM\"\"  \"YMmMY\" """;
    Assert.assertEquals(expected,ASCIILogos.COSMIKE.getVal());
}


@Test
public void TestCONTRAST()
{
    String expected = """
.%%......%%..%%..%%%%%...%%..%%...%%%%..
.%%......%%..%%..%%..%%..%%..%%..%%.....
.%%......%%..%%..%%..%%..%%..%%...%%%%..
.%%......%%..%%..%%..%%..%%..%%......%%.
.%%%%%%...%%%%...%%%%%....%%%%....%%%%..
........................................""";
    Assert.assertEquals(expected,ASCIILogos.CONTRAST.getVal());
}


@Test
public void TestCRAWFORD()
{
    String expected = """
 _      __ __  ___    __ __  _____
| T    |  T  T|   \\  |  T  T/ ___/
| |    |  |  ||    \\ |  |  (   \\_ 
| l___ |  |  ||  D  Y|  |  |\\__  T
|     T|  :  ||     ||  :  |/  \\ |
|     |l     ||     |l     |\\    |
l_____j \\__,_jl_____j \\__,_j \\___j
                                  """;
    Assert.assertEquals(expected,ASCIILogos.CRAWFORD.getVal());
}


@Test
public void TestCRAWFORDTWO()
{
    String expected = """
 _      __ __  ___    __ __  _____
| |    |  |  ||   \\  |  |  |/ ___/
| |    |  |  ||    \\ |  |  (   \\_ 
| |___ |  |  ||  D  ||  |  |\\__  |
|     ||  :  ||     ||  :  |/  \\ |
|     ||     ||     ||     |\\    |
|_____| \\__,_||_____| \\__,_| \\___|
                                  """;
    Assert.assertEquals(expected,ASCIILogos.CRAWFORDTWO.getVal());
}


@Test
public void TestCYBERLARGE()
{
    String expected = """
        _     _ ______  _     _ _______
 |      |     | |     \\ |     | |______
 |_____ |_____| |_____/ |_____| ______|
                                       """;
    Assert.assertEquals(expected,ASCIILogos.CYBERLARGE.getVal());
}


@Test
public void TestCURSIVE()
{
    String expected = """
   _                
 _//        /       
 /   . . __/ . . _  
/___(_/_(_/_(_/_/_)_
                    
                    """;
    Assert.assertEquals(expected,ASCIILogos.CURSIVE.getVal());
}


@Test
public void TestCYBERMEDIUM()
{
    String expected = """
_    _  _ ___  _  _ ____ 
|    |  | |  \\ |  | [__  
|___ |__| |__/ |__| ___] 
                         """;
    Assert.assertEquals(expected,ASCIILogos.CYBERMEDIUM.getVal());
}


@Test
public void TestCYBERSMALL()
{
    String expected = """
 _    _  _ ___  _  _ ____
 |___ |__| |__> |__| ====""";
    Assert.assertEquals(expected,ASCIILogos.CYBERSMALL.getVal());
}


@Test
public void TestCYGNET()
{
    String expected = """
               
.       .      
|  . ..-| . ..-
'-''-'`-'-'-'-'
               """;
    Assert.assertEquals(expected,ASCIILogos.CYGNET.getVal());
}


@Test
public void TestDANCFOUR()
{
    String expected = """
 |_O    \\O'\\   /`\\O   |_O_|
  _#>    |_ \\ /   |_   _|  
_|  \\   /  | Y   /  |_|  \\ 
    |_./   |_O\\./   |_   |_""";
    Assert.assertEquals(expected,ASCIILogos.DANCFOUR.getVal());
}


@Test
public void TestDWHISTLED()
{
    String expected = """
Lu us
  X  
  X  
  X  
  X  
  X  
  X  
     
Ludus
     """;
    Assert.assertEquals(expected,ASCIILogos.DWHISTLED.getVal());
}


@Test
public void TestDECIMAL()
{
    String expected = """
76 117 100 117 115 """;
    Assert.assertEquals(expected,ASCIILogos.DECIMAL.getVal());
}


@Test
public void TestDIET_COLA()
{
    String expected = """
       .-.              .          
      / (_)            /           
     /      )  (  .-../ )  (   .   
    /      (    )(   / (    ) / \\  
 .-/.    .-.`--': `-'-..`--':/ ._) 
(_/ `-._.                   /      """;
    Assert.assertEquals(expected,ASCIILogos.DIET_COLA.getVal());
}


@Test
public void TestDOUBLE_SHORTS()
{
    String expected = """
__    __ __ _____ __ __   __ 
||    || || ||  ) || ||  ((  
||__| \\\\_// ||_// \\\\_// \\_)) """;
    Assert.assertEquals(expected,ASCIILogos.DOUBLE_SHORTS.getVal());
}


@Test
public void TestDOOM()
{
    String expected = """
 _               _           
| |             | |          
| |    _   _  __| |_   _ ___ 
| |   | | | |/ _` | | | / __|
| |___| |_| | (_| | |_| \\__ \\
\\_____/\\__,_|\\__,_|\\__,_|___/
                             
                             """;
    Assert.assertEquals(expected,ASCIILogos.DOOM.getVal());
}


@Test
public void TestDOUBLE()
{
    String expected = """
 __    __ __ ____   __ __  __ 
 ||    || || || \\\\  || || (( \\
 ||    || || ||  )) || ||  \\\\ 
 ||__| \\\\_// ||_//  \\\\_// \\_))
                              """;
    Assert.assertEquals(expected,ASCIILogos.DOUBLE.getVal());
}


@Test
public void TestDR_PEPPER()
{
    String expected = """
 _           _          
| |   _ _  _| | _ _  ___
| |_ | | |/ . || | |<_-<
|___|`___|\\___|`___|/__/
                        """;
    Assert.assertEquals(expected,ASCIILogos.DR_PEPPER.getVal());
}


@Test
public void TestEFTI_CHESS()
{
    String expected = """
         
  |:+:|  
  (o:o)  
   (:)   
         """;
    Assert.assertEquals(expected,ASCIILogos.EFTI_CHESS.getVal());
}


@Test
public void TestEFTI_ITALIC()
{
    String expected = """
   __                
  / /       _//    __
 / /_ /7/7,'o//7/7(c'
/___//__/|__//__//__)
                     """;
    Assert.assertEquals(expected,ASCIILogos.EFTI_ITALIC.getVal());
}


@Test
public void TestEFTI_PITI()
{
    String expected = """
||     
L_]udus
       """;
    Assert.assertEquals(expected,ASCIILogos.EFTI_PITI.getVal());
}


@Test
public void TestEFTI_FONT()
{
    String expected = """
 _            
| |    ||   _ 
| |_|U/o||U(c'
|___\\_|_|\\_|_)
              """;
    Assert.assertEquals(expected,ASCIILogos.EFTI_FONT.getVal());
}


@Test
public void TestEFTI_WATER()
{
    String expected = """
 _          _         
 ))  _    __)) _    __
((__((_( ((_( ((_( _))
                      """;
    Assert.assertEquals(expected,ASCIILogos.EFTI_WATER.getVal());
}


@Test
public void TestEFTI_WALL()
{
    String expected = """
                    o               ...            o                     
     _/7         ` /_\\ '       o,*,(o o)        ` /_\\ '      `  _ ,  '   
    (o o)       - (o o) -     8(o o)(_)Ooo     - (o o) -    -  (o)o)  -  
ooO--(_)--Ooo-ooO--(_)--Ooo-ooO-(_)---Ooo----ooO--(_)--Ooo--ooO'(_)--Ooo-""";
    Assert.assertEquals(expected,ASCIILogos.EFTI_WALL.getVal());
}


@Test
public void TestEFTI_ROBOT()
{
    String expected = """
 _           _          
( )         ( )         
| |   _ _  _| | _ _  __ 
( )_ ( U )/ o )( U )(_' 
/___\\/___\\\\___\\/___\\/__)
                        """;
    Assert.assertEquals(expected,ASCIILogos.EFTI_ROBOT.getVal());
}


@Test
public void TestELITE()
{
    String expected = """
▄▄▌  ▄• ▄▌·▄▄▄▄  ▄• ▄▌.▄▄ · 
██•  █▪██▌██▪ ██ █▪██▌▐█ ▀. 
██▪  █▌▐█▌▐█· ▐█▌█▌▐█▌▄▀▀▀█▄
▐█▌▐▌▐█▄█▌██. ██ ▐█▄█▌▐█▄▪▐█
.▀▀▀  ▀▀▀ ▀▀▀▀▀•  ▀▀▀  ▀▀▀▀ """;
    Assert.assertEquals(expected,ASCIILogos.ELITE.getVal());
}


@Test
public void TestFILTER()
{
    String expected = """
888      888  888   88PPP. 888  888 88888888  
888      888  888   88   8 888  888 88ooooPp  
888      888  888   88   8 888  888        d8 
888PPPPP 888PP888   88oop' 888PP888 8888888P  
                                              """;
    Assert.assertEquals(expected,ASCIILogos.FILTER.getVal());
}


@Test
public void TestFENDER()
{
    String expected = """
'||                  ||`                
 ||                  ||                 
 ||     '||  ||` .|''||  '||  ||` ('''' 
 ||      ||  ||  ||  ||   ||  ||   `'') 
.||...|  `|..'|. `|..||.  `|..'|. `...' 
                                        
                                        """;
    Assert.assertEquals(expected,ASCIILogos.FENDER.getVal());
}


@Test
public void TestFLIPPED()
{
    String expected = """
       ____  ____  ____  _ __ 
 ____ |   _|| __ ||   _|| |  \\
|  __||  |_ | |/ ||  |_ | || |
|_|   |____|\\___/ |____|\\__|_|""";
    Assert.assertEquals(expected,ASCIILogos.FLIPPED.getVal());
}


@Test
public void TestFOUR_TOPS()
{
    String expected = """
|         |       
| |   |/~~||   |(~
|__\\_/|\\__| \\_/|_)
                  """;
    Assert.assertEquals(expected,ASCIILogos.FOUR_TOPS.getVal());
}


@Test
public void TestFUN_FACE()
{
    String expected = """
  W  W    wWw  wWw     _  wWw  wWw  oo_    
 (O)(O)   (O)  (O)   _||\\ (O)  (O) /  _)-< 
   ||     / )  ( \\  (_'\\  / )  ( \\ \\__ `.  
   | \\   / /    \\ \\ .'  |/ /    \\ \\   `. | 
   |  `. | \\____/ |((_) || \\____/ |   _| | 
  (.-.__)'. `--' .` `-`.)'. `--' .`,-'   | 
   `-'     `-..-'      (   `-..-' (_..--'  """;
    Assert.assertEquals(expected,ASCIILogos.FUN_FACE.getVal());
}


@Test
public void TestFUZZY()
{
    String expected = """
.-.            .-.            
: :            : :            
: :   .-..-. .-' :.-..-. .--. 
: :__ : :; :' .; :: :; :`._-.'
:___.'`.__.'`.__.'`.__.'`.__.'
                              
                              """;
    Assert.assertEquals(expected,ASCIILogos.FUZZY.getVal());
}


@Test
public void TestGLENYN()
{
    String expected = """
__   _    ___  _    ___  
| |  || \\ |  \\ || \\ | _\\ 
| |__||_|\\| . \\||_|\\[__ \\
|___/|___/|___/|___/|___/""";
    Assert.assertEquals(expected,ASCIILogos.GLENYN.getVal());
}


@Test
public void TestGOOFY()
{
    String expected = """
     ____    ___    _     ___    ___    __       __
\\   |    |  |   |  | |    \\  |  |   |  |  )  ____) 
 |  |    |  |   |  | |     | |  |   |  | (  (___   
 |  |    |  |   |  | |     | |  |   |  |  \\___  \\  
 |  |__  |   \\_/   | |     | |   \\_/   |  ____)  ) 
/      )__\\       /__|    /___\\       /__(      (__""";
    Assert.assertEquals(expected,ASCIILogos.GOOFY.getVal());
}


@Test
public void TestGRAFFITI()
{
    String expected = """
.____              .___            
|    |    __ __  __| _/_ __  ______
|    |   |  |  \\/ __ |  |  \\/  ___/
|    |___|  |  / /_/ |  |  /\\___ \\ 
|_______ \\____/\\____ |____//____  >
        \\/          \\/          \\/ """;
    Assert.assertEquals(expected,ASCIILogos.GRAFFITI.getVal());
}


@Test
public void TestHEART_LEFT()
{
    String expected = """
 .-.-. .-.-. .-.-. .-.-. .-.-. 
( L .'( u .'( d .'( u .'( s .' 
 `.(   `.(   `.(   `.(   `.(   
                               """;
    Assert.assertEquals(expected,ASCIILogos.HEART_LEFT.getVal());
}


@Test
public void TestHEART_RIGHT()
{
    String expected = """
.-.-. .-.-. .-.-. .-.-. .-.-.  
'. L )'. u )'. d )'. u )'. s ) 
  ).'   ).'   ).'   ).'   ).'  
                               """;
    Assert.assertEquals(expected,ASCIILogos.HEART_RIGHT.getVal());
}


@Test
public void TestHEX()
{
    String expected = """
4C 75 64 75 73 """;
    Assert.assertEquals(expected,ASCIILogos.HEX.getVal());
}


@Test
public void TestHIEROGLYPHS()
{
    String expected = """
  ,-.       ,-.<~)_        _       <~)_   ,-. 
 <,- \\_____/  ` ( v~\\  __,(: `,_,.  ( v~\\ | | 
   /  ___. \\     \\_/' (.-_-   __ |   \\_/' | ' 
,_(__/ ,_(__\\    /\\     `----'  -'   /\\   |   """;
    Assert.assertEquals(expected,ASCIILogos.HIEROGLYPHS.getVal());
}


@Test
public void TestHORIZONTAL_RIGHT()
{
    String expected = """
 _______    ______   _______    ______   __       
/ ______\\ .' _____\\ |  ___  | .' _____\\ /  / .-.  
| \\       | /_____  | '._.' | | /_____  | /_/ _ \\ 
|_/       '.______/ '._____.' '.______/ \\___.'/_| 
                                                  
                                                  """;
    Assert.assertEquals(expected,ASCIILogos.HORIZONTAL_RIGHT.getVal());
}


@Test
public void TestHORIZONTAL_LEFT()
{
    String expected = """
 _______   ______    _______   ______         __  
/______ \\ /_____ `. |  ___  | /_____ `.  .-. \\  \\ 
      / |  _____\\ | | '._.' |  _____\\ | / _ \\_\\ | 
      \\_| \\______.` '._____.' \\______.` |_\\`.___/ 
                                                  
                                                  """;
    Assert.assertEquals(expected,ASCIILogos.HORIZONTAL_LEFT.getVal());
}


@Test
public void TestINVITA()
{
    String expected = """
     _                
 ___/__)     /)       
(, /       _(/     _  
  /   (_(_(_(_(_(_/_)_
 (_____               
        )             """;
    Assert.assertEquals(expected,ASCIILogos.INVITA.getVal());
}


@Test
public void TestICL_ONE900()
{
    String expected = """
Ludus
  *  
*    
 * **
     
    *
*    
 *** 
     
     
     
     
     """;
    Assert.assertEquals(expected,ASCIILogos.ICL_ONE900.getVal());
}


@Test
public void TestITALIC()
{
    String expected = """
             
 /    _/   _ 
(__(/(/(/_)  
             """;
    Assert.assertEquals(expected,ASCIILogos.ITALIC.getVal());
}


@Test
public void TestJS_BLOCK_LETTERS()
{
    String expected = """
 _    __ __  ____  __ __  ____ 
| |__|  |  || _) \\|  |  |(_ (_`
|____|\\___/ |____/ \\___/.__)__)""";
    Assert.assertEquals(expected,ASCIILogos.JS_BLOCK_LETTERS.getVal());
}


@Test
public void TestJS_BRACKET_LETTERS()
{
    String expected = """
.-.   .-. .-..----. .-. .-. .----.
| |   | { } || {}  \\| { } |{ {__  
| `--.| {_} ||     /| {_} |.-._} }
`----'`-----'`----' `-----'`----' """;
    Assert.assertEquals(expected,ASCIILogos.JS_BRACKET_LETTERS.getVal());
}


@Test
public void TestJS_CURSIVE()
{
    String expected = """
   _                     
  //       __/        ,  
_(/__(_/__(_/(__(_/__/_)_
                         
                         
                         """;
    Assert.assertEquals(expected,ASCIILogos.JS_CURSIVE.getVal());
}


@Test
public void TestJS_STICK_LETTERS()
{
    String expected = """
           __        __  
|    |  | |  \\ |  | /__` 
|___ \\__/ |__/ \\__/ .__/ 
                         """;
    Assert.assertEquals(expected,ASCIILogos.JS_STICK_LETTERS.getVal());
}


@Test
public void TestJS_CAPITAL_CURVES()
{
    String expected = """
 __    __   _, ____, __   _, ____ 
(-|   (-|  |  (-|  \\(-|  |  (-(__`
 _|__,  |__|_, _|__/  |__|_, ____)
(             (             (     """;
    Assert.assertEquals(expected,ASCIILogos.JS_CAPITAL_CURVES.getVal());
}


@Test
public void TestKBAN()
{
    String expected = """
'||'                    '||                  
 ||       ... ...     .. ||  ... ...   ....  
 ||        ||  ||   .'  '||   ||  ||  ||. '  
 ||        ||  ||   |.   ||   ||  ||  . '|.. 
.||.....|  '|..'|.  '|..'||.  '|..'|. |'..|' 
                                             
                                             """;
    Assert.assertEquals(expected,ASCIILogos.KBAN.getVal());
}


@Test
public void TestKONTO_SLANT()
{
    String expected = """
 / / /  /`. / /  /�� 
/. L/  /.-� L/  ../  """;
    Assert.assertEquals(expected,ASCIILogos.KONTO_SLANT.getVal());
}


@Test
public void TestKNOB()
{
    String expected = """
 _________  _________  _________  _________  _   _____ 
(  _______)(  _______)(  _____  )(  _______)( ) (  _  )
| |        | |_______  \\ \\___/ / | |_______ | |_| | | |
(_)        (_________)  (_____)  (_________)(_____) (_)""";
    Assert.assertEquals(expected,ASCIILogos.KNOB.getVal());
}


@Test
public void TestKONTO()
{
    String expected = """
I   I  I I`. I  I /�� 
L.. `..I I./ `..I ..7 """;
    Assert.assertEquals(expected,ASCIILogos.KONTO.getVal());
}


@Test
public void TestLCD()
{
    String expected = """
                              
|               |             
|              -|          -  
|     | |     | | | |      \\  
 ---   --      -   --      -  
                              """;
    Assert.assertEquals(expected,ASCIILogos.LCD.getVal());
}


@Test
public void TestLETTERS()
{
    String expected = """
LL                   dd               
LL      uu   uu      dd uu   uu  sss  
LL      uu   uu  dddddd uu   uu s     
LL      uu   uu dd   dd uu   uu  sss  
LLLLLLL  uuuu u  dddddd  uuuu u     s 
                                 sss  """;
    Assert.assertEquals(expected,ASCIILogos.LETTERS.getVal());
}


@Test
public void TestLINE_BLOCKS()
{
    String expected = """
 _        _    _   _____    _    _   ______  
| |      | |  | | | | \\ \\  | |  | | / |      
| |   _  | |  | | | |  | | | |  | | '------. 
|_|__|_| \\_|__|_| |_|_/_/  \\_|__|_|  ____|_/ 
                                             """;
    Assert.assertEquals(expected,ASCIILogos.LINE_BLOCKS.getVal());
}


@Test
public void TestLINUX()
{
    String expected = """
.-.   .-..-..--. .-..-..---.
| |__ | || || \\ \\| || | \\ \\ 
`----'`----'`-'-'`----'`---'
                            """;
    Assert.assertEquals(expected,ASCIILogos.LINUX.getVal());
}


@Test
public void TestMADRID()
{
    String expected = """
/         |         
|   | | /=| | | /== 
\\=/ \\=/ \\=| \\=/ ==/ 
                    """;
    Assert.assertEquals(expected,ASCIILogos.MADRID.getVal());
}


@Test
public void TestMAXFOUR()
{
    String expected = """
|         |       
| |   |/~~||   |(~
|__\\_/|\\__| \\_/|_)
                  """;
    Assert.assertEquals(expected,ASCIILogos.MAXFOUR.getVal());
}


@Test
public void TestLOCKERGNOME()
{
    String expected = """
::|           :|           
::|    :\\:| :':| :\\:| <::< 
::::::|`::| :::| `::| >::> 
                           """;
    Assert.assertEquals(expected,ASCIILogos.LOCKERGNOME.getVal());
}


@Test
public void TestMIKE()
{
    String expected = """
  |      |       
  | |/| \\| |/| //
                 """;
    Assert.assertEquals(expected,ASCIILogos.MIKE.getVal());
}


@Test
public void TestMORSE()
{
    String expected = """
.-.. ..- -.. ..- ... """;
    Assert.assertEquals(expected,ASCIILogos.MORSE.getVal());
}


@Test
public void TestMORSETWO()
{
    String expected = """
.-.. ..- -.. ..- ... """;
    Assert.assertEquals(expected,ASCIILogos.MORSETWO.getVal());
}


@Test
public void TestMSHEBREWTWOONE0()
{
    String expected = """
        
\"\"|'|\\ |
  | |/\\|
        """;
    Assert.assertEquals(expected,ASCIILogos.MSHEBREWTWOONE0.getVal());
}


@Test
public void TestMOSCOW()
{
    String expected = """
                               
##### #   # #####  #   #  #### 
 #  #  # #   #  #   # #  #     
 #  #   #    #  #    #   #     
 #  #  #     ####   #    #     
#   # #     #    # #      #### """;
    Assert.assertEquals(expected,ASCIILogos.MOSCOW.getVal());
}


@Test
public void TestMUZZLE()
{
    String expected = """
                       
|   |  |  __| |  | |<< 
|   |  | |<<| |  | --  
|<< '<<' |__| '<<' >>| """;
    Assert.assertEquals(expected,ASCIILogos.MUZZLE.getVal());
}


@Test
public void TestMODULAR()
{
    String expected = """
 ___      __   __  ______   __   __  _______ 
|   |    |  | |  ||      | |  | |  ||       |
|   |    |  | |  ||  _    ||  | |  ||  _____|
|   |    |  |_|  || | |   ||  |_|  || |_____ 
|   |___ |       || |_|   ||       ||_____  |
|       ||       ||       ||       | _____| |
|_______||_______||______| |_______||_______|""";
    Assert.assertEquals(expected,ASCIILogos.MODULAR.getVal());
}


@Test
public void TestOCTAL()
{
    String expected = """
114 165 144 165 163 """;
    Assert.assertEquals(expected,ASCIILogos.OCTAL.getVal());
}


@Test
public void TestOGRE()
{
    String expected = """
   __           _           
  / / _   _  __| |_   _ ___ 
 / / | | | |/ _` | | | / __|
/ /__| |_| | (_| | |_| \\__ \\
\\____/\\__,_|\\__,_|\\__,_|___/
                            """;
    Assert.assertEquals(expected,ASCIILogos.OGRE.getVal());
}


@Test
public void TestOLD_BANNER()
{
    String expected = """
#                                   
#       #    # #####  #    #  ####  
#       #    # #    # #    # #      
#       #    # #    # #    #  ####  
#       #    # #    # #    #      # 
#       #    # #    # #    # #    # 
#######  ####  #####   ####   ####  """;
    Assert.assertEquals(expected,ASCIILogos.OLD_BANNER.getVal());
}


@Test
public void TestPEPPER()
{
    String expected = """
               
 /      _/    _
/_,/_//_//_/_\\ 
               """;
    Assert.assertEquals(expected,ASCIILogos.PEPPER.getVal());
}


@Test
public void TestPUZZLE()
{
    String expected = """
     _        _        _        _        _    
   _( )__   _( )__   _( )__   _( )__   _( )__ 
 _|     _|_|     _|_|     _|_|     _|_|     _|
(_ L _ (_(_ U _ (_(_ D _ (_(_ U _ (_(_ S _ (_ 
  |_( )__| |_( )__| |_( )__| |_( )__| |_( )__|""";
    Assert.assertEquals(expected,ASCIILogos.PUZZLE.getVal());
}


@Test
public void TestPUFFY()
{
    String expected = """
 _                 _              
( )               ( )             
| |     _   _    _| | _   _   ___ 
| |  _ ( ) ( ) /'_` |( ) ( )/',__)
| |_( )| (_) |( (_| || (_) |\\__, \\
(____/'`\\___/'`\\__,_)`\\___/'(____/
                                  
                                  """;
    Assert.assertEquals(expected,ASCIILogos.PUFFY.getVal());
}


@Test
public void TestPYRAMID()
{
    String expected = """
  ^    ^    ^    ^    ^  
 /L\\  /u\\  /d\\  /u\\  /s\\ 
<___><___><___><___><___>""";
    Assert.assertEquals(expected,ASCIILogos.PYRAMID.getVal());
}


@Test
public void TestRECTANGLES()
{
    String expected = """
                       
 __          _         
|  |   _ _ _| |_ _ ___ 
|  |__| | | . | | |_ -|
|_____|___|___|___|___|
                       """;
    Assert.assertEquals(expected,ASCIILogos.RECTANGLES.getVal());
}


@Test
public void TestROTONETHREE()
{
    String expected = """
Yhqhf""";
    Assert.assertEquals(expected,ASCIILogos.ROTONETHREE.getVal());
}


@Test
public void TestROTATED()
{
    String expected = """
 ____  __   _    __      
|     (__  (_)_ (__  (/) 
                         """;
    Assert.assertEquals(expected,ASCIILogos.ROTATED.getVal());
}


@Test
public void TestROWAN_CAP()
{
    String expected = """
    dMP    dMP dMP dMMMMb  dMP dMP .dMMMb 
   dMP    dMP dMP dMP VMP dMP dMP dMP\" VP 
  dMP    dMP dMP dMP dMP dMP dMP  VMMMb   
 dMP    dMP.aMP dMP.aMP dMP.aMP dP .dMP   
dMMMMMP VMMMP\" dMMMMP\"  VMMMP\"  VMMMP\"    
                                          """;
    Assert.assertEquals(expected,ASCIILogos.ROWAN_CAP.getVal());
}


@Test
public void TestROUNDED()
{
    String expected = """
 _                 _            
(_)               | |           
 _       _   _  __| |_   _  ___ 
| |     | | | |/ _  | | | |/___)
| |_____| |_| ( (_| | |_| |___ |
|_______)____/ \\____|____/(___/ 
                                """;
    Assert.assertEquals(expected,ASCIILogos.ROUNDED.getVal());
}


@Test
public void TestRUNIC()
{
    String expected = """
|\\   
| \\  
|  \\ 
|    
|    
|    """;
    Assert.assertEquals(expected,ASCIILogos.RUNIC.getVal());
}


@Test
public void TestROZZO()
{
    String expected = """
888                    888                 
888     8888 8888  e88 888 8888 8888  dP\"Y 
888     8888 8888 d888 888 8888 8888 C88b  
888  ,d Y888 888P Y888 888 Y888 888P  Y88D 
888,d88  \"88 88\"   \"88 888  \"88 88\"  d,dP  
                                           
                                           """;
    Assert.assertEquals(expected,ASCIILogos.ROZZO.getVal());
}


@Test
public void TestRUNYC()
{
    String expected = """
|\\                    
| \\                   
|  \\                  
|    |\\  |\\ /| |\\  /  
|    | | | X | | | -- 
|    | | |/ \\| | |  / """;
    Assert.assertEquals(expected,ASCIILogos.RUNYC.getVal());
}


@Test
public void TestSL_SCRIPT()
{
    String expected = """
   _                
 _//        /       
 /   . . __/ . . _  
/___(_/_(_/_(_/_/_)_
                    
                    """;
    Assert.assertEquals(expected,ASCIILogos.SL_SCRIPT.getVal());
}


@Test
public void TestS_BLOOD()
{
    String expected = """
 @@@      @@@  @@@ @@@@@@@  @@@  @@@  @@@@@@
 @@!      @@!  @@@ @@!  @@@ @@!  @@@ !@@    
 @!!      @!@  !@! @!@  !@! @!@  !@!  !@@!! 
 !!:      !!:  !!! !!:  !!! !!:  !!!     !:!
 : ::.: :  :.:: :  :: :  :   :.:: :  ::.: : 
                                            """;
    Assert.assertEquals(expected,ASCIILogos.S_BLOOD.getVal());
}


@Test
public void TestSERIFCAP()
{
    String expected = """
 __   _  _  ___  _  _  ___ 
(  ) ( )( )(   \\( )( )/ __)
 )(__ )()(  ) ) ))()( \\__ \\
(____)\\__/ (___/ \\__/ (___/""";
    Assert.assertEquals(expected,ASCIILogos.SERIFCAP.getVal());
}


@Test
public void TestSANTA_CLARA()
{
    String expected = """
  __                  
 ( /          /       
  /    , , __/ , , (  
(/___/(_/_(_/_(_/_/_)_
                      
                      """;
    Assert.assertEquals(expected,ASCIILogos.SANTA_CLARA.getVal());
}


@Test
public void TestSHORT()
{
    String expected = """
|    |   _
|_L|(|L|_\\
          """;
    Assert.assertEquals(expected,ASCIILogos.SHORT.getVal());
}


@Test
public void TestSMALL_CAPS()
{
    String expected = """
 _      _  _   ___   _  _    ___  
) |    ) () ( \\   \\ ) () (  (  _( 
| (__  | \\/ | | ) ( | \\/ |  _) \\  
)____( )____( /___/ )____( )____) 
                                  """;
    Assert.assertEquals(expected,ASCIILogos.SMALL_CAPS.getVal());
}


@Test
public void TestSLIDE()
{
    String expected = """
##          H|           
##  ## H|   H|## H| #HH| 
##  ## H| #HH|## H|##H|  
##  ## H|## H|## H|   H| 
##HH|#HH| #HH| #HH|##H|  
                         """;
    Assert.assertEquals(expected,ASCIILogos.SLIDE.getVal());
}


@Test
public void TestSMALL_ISOMETRICONE()
{
    String expected = """
    ___       ___       ___       ___       ___   
   /\\__\\     /\\__\\     /\\  \\     /\\__\\     /\\  \\  
  /:/  /    /:/ _/_   /::\\  \\   /:/ _/_   /::\\  \\ 
 /:/__/    /:/_/\\__\\ /:/\\:\\__\\ /:/_/\\__\\ /\\:\\:\\__\\
 \\:\\  \\    \\:\\/:/  / \\:\\/:/  / \\:\\/:/  / \\:\\:\\/__/
  \\:\\__\\    \\::/  /   \\::/  /   \\::/  /   \\::/  / 
   \\/__/     \\/__/     \\/__/     \\/__/     \\/__/  """;
    Assert.assertEquals(expected,ASCIILogos.SMALL_ISOMETRICONE.getVal());
}


@Test
public void TestSMALL_KEYBOARD()
{
    String expected = """
 ____ ____ ____ ____ ____ 
||L |||u |||d |||u |||s ||
||__|||__|||__|||__|||__||
|/__\\|/__\\|/__\\|/__\\|/__\\|""";
    Assert.assertEquals(expected,ASCIILogos.SMALL_KEYBOARD.getVal());
}


@Test
public void TestSHIMROD()
{
    String expected = """
,          .         
|          |         
|    . . ,-| . . ,-. 
|    | | | | | | `-. 
`--' `-` `-' `-` `-' 
                     """;
    Assert.assertEquals(expected,ASCIILogos.SHIMROD.getVal());
}


@Test
public void TestSMALL_TENGWAR()
{
    String expected = """
    ?  _ _  ?     
--- | | ) ) | (~) 
(_,   |        /  """;
    Assert.assertEquals(expected,ASCIILogos.SMALL_TENGWAR.getVal());
}


@Test
public void TestSPLIFF()
{
    String expected = """
 ____   __ __  _____  __ __  _____ 
/  _/  /  |  \\|  _  \\/  |  \\/  ___>
|  |---|  |  ||  |  ||  |  ||___  |
\\_____/\\_____/|_____/\\_____/<_____/
                                   """;
    Assert.assertEquals(expected,ASCIILogos.SPLIFF.getVal());
}


@Test
public void TestSTAMPATE()
{
    String expected = """
.          .         
|    . . ,-| . . ,-. 
|    | | | | | | `-. 
`--' `-' `-' `-' `-' 
                     
                     """;
    Assert.assertEquals(expected,ASCIILogos.STAMPATE.getVal());
}


@Test
public void TestSTACEY()
{
    String expected = """
____   ____________  ______________
7  7   7  7  77    \\ 7  7  77     7
|  |   |  |  ||  7  ||  |  ||  ___!
|  !___|  |  ||  |  ||  |  |!__   7
|     7|  !  ||  !  ||  !  |7     |
!_____!!_____!!_____!!_____!!_____!
                                   """;
    Assert.assertEquals(expected,ASCIILogos.STACEY.getVal());
}


@Test
public void TestSTICK_LETTERS()
{
    String expected = """
           __        __  
|    |  | |  \\ |  | /__` 
|___ \\__/ |__/ \\__/ .__/ 
                         """;
    Assert.assertEquals(expected,ASCIILogos.STICK_LETTERS.getVal());
}


@Test
public void TestSTAR_WARS()
{
    String expected = """
 __       __    __   _______   __    __       _______.
|  |     |  |  |  | |       \\ |  |  |  |     /       |
|  |     |  |  |  | |  .--.  ||  |  |  |    |   (----`
|  |     |  |  |  | |  |  |  ||  |  |  |     \\   \\    
|  `----.|  `--'  | |  '--'  ||  `--'  | .----)   |   
|_______| \\______/  |_______/  \\______/  |_______/    
                                                      """;
    Assert.assertEquals(expected,ASCIILogos.STAR_WARS.getVal());
}


@Test
public void TestSTFOREK()
{
    String expected = """
 _  _  _ __  _  _   __  
| || || | _\\| || |/' _/ 
| || \\/ | v | \\/ |`._`. 
|___\\__/|__/ \\__/ |___/ """;
    Assert.assertEquals(expected,ASCIILogos.STFOREK.getVal());
}


@Test
public void TestSTRAIGHT()
{
    String expected = """
               
|      _|    _ 
|__|_|(_||_|_) 
               """;
    Assert.assertEquals(expected,ASCIILogos.STRAIGHT.getVal());
}


@Test
public void TestSTOP()
{
    String expected = """
 _                _            
| |              | |           
| |     _   _  _ | |_   _  ___ 
| |    | | | |/ || | | | |/___)
| |____| |_| ( (_| | |_| |___ |
|_______)____|\\____|\\____(___/ 
                               """;
    Assert.assertEquals(expected,ASCIILogos.STOP.getVal());
}


@Test
public void TestSTRONGER_THAN_ALL()
{
    String expected = """
.___    .____     .______  .____     .________
|   |   |    |___ :_ _   \\ |    |___ |    ___/
|   |   |    |   ||   |   ||    |   ||___    \\
|   |/\\ |    :   || . |   ||    :   ||       /
|   /  \\|        ||. ____/ |        ||__:___/ 
|______/|. _____/  :/      |. _____/    :     
         :/        :        :/                
         :                  :                 
                                              """;
    Assert.assertEquals(expected,ASCIILogos.STRONGER_THAN_ALL.getVal());
}


@Test
public void TestSUB_ZERO()
{
    String expected = """
 __         __  __     _____     __  __     ______    
/\\ \\       /\\ \\/\\ \\   /\\  __-.  /\\ \\/\\ \\   /\\  ___\\   
\\ \\ \\____  \\ \\ \\_\\ \\  \\ \\ \\/\\ \\ \\ \\ \\_\\ \\  \\ \\___  \\  
 \\ \\_____\\  \\ \\_____\\  \\ \\____-  \\ \\_____\\  \\/\\_____\\ 
  \\/_____/   \\/_____/   \\/____/   \\/_____/   \\/_____/ 
                                                      """;
    Assert.assertEquals(expected,ASCIILogos.SUB_ZERO.getVal());
}


@Test
public void TestTHIS()
{
    String expected = """
 ▄▀▀▀▀▄   ▄▀▀▄ ▄▀▀▄  ▄▀▀█▄▄   ▄▀▀▄ ▄▀▀▄  ▄▀▀▀▀▄ 
█    █   █   █    █ █ ▄▀   █ █   █    █ █ █   ▐ 
▐    █   ▐  █    █  ▐ █    █ ▐  █    █     ▀▄   
    █      █    █     █    █   █    █   ▀▄   █  
  ▄▀▄▄▄▄▄▄▀ ▀▄▄▄▄▀   ▄▀▄▄▄▄▀    ▀▄▄▄▄▀   █▀▀▀   
  █                 █     ▐              ▐      
  ▐                 ▐                           """;
    Assert.assertEquals(expected,ASCIILogos.THIS.getVal());
}


@Test
public void TestTANJA()
{
    String expected = """
L)                    d)                 
L)                    d)                 
L)       u)   UU  d)DDDD u)   UU  s)SSSS 
L)       u)   UU d)   DD u)   UU s)SSSS  
L)       u)   UU d)   DD u)   UU      s) 
L)llllll  u)UUU   d)DDDD  u)UUU  s)SSSS  
                                         
                                         """;
    Assert.assertEquals(expected,ASCIILogos.TANJA.getVal());
}


@Test
public void TestTESTONE()
{
    String expected = """
 ____      _____ ___________________ _____ __________
/   /_____ \\   / \\   /     O   \\   / \\   //_________/
\\___\\_____\\/___\\_/___\\_________/___\\_/___\\`%%%%%%%%%/
 `BBBBBBBB'`BBBBBBBBB'`BBBBBBB'`BBBBBBBBB'`BBBBBBBB' """;
    Assert.assertEquals(expected,ASCIILogos.TESTONE.getVal());
}


@Test
public void TestTHE_EDGE()
{
    String expected = """
█       ▄   ██▄     ▄      ▄▄▄▄▄   
█        █  █  █     █    █     ▀▄ 
█     █   █ █   █ █   █ ▄  ▀▀▀▀▄   
███▄  █   █ █  █  █   █  ▀▄▄▄▄▀    
    ▀ █▄ ▄█ ███▀  █▄ ▄█            
       ▀▀▀         ▀▀▀             
                                   """;
    Assert.assertEquals(expected,ASCIILogos.THE_EDGE.getVal());
}


@Test
public void TestTHIN()
{
    String expected = """
                         
|             |          
|    .   .,---|.   .,---.
|    |   ||   ||   |`---.
`---'`---'`---'`---'`---'
                         """;
    Assert.assertEquals(expected,ASCIILogos.THIN.getVal());
}


@Test
public void TestTHORNED()
{
    String expected = """
 ,   ,  ,  ,_  ,  , _, 
 |   |  |  | \\,|  |(_, 
'|__'\\__| _|_/'\\__| _) 
   '    `'        `'   
                       """;
    Assert.assertEquals(expected,ASCIILogos.THORNED.getVal());
}


@Test
public void TestTHICK()
{
    String expected = """
8             8            
8    8   8 .d88 8   8 d88b 
8    8b d8 8  8 8b d8 `Yb. 
8888 `Y8P8 `Y88 `Y8P8 Y88P 
                           """;
    Assert.assertEquals(expected,ASCIILogos.THICK.getVal());
}


@Test
public void TestTHREE_POINT()
{
    String expected = """
|     _|    _
|_|_|(_||_|_\\
             """;
    Assert.assertEquals(expected,ASCIILogos.THREE_POINT.getVal());
}


@Test
public void TestTINKER_TOY()
{
    String expected = """
o            o          
|            |          
|    o  o  o-O o  o o-o 
|    |  | |  | |  |  \\  
O---oo--o  o-o o--o o-o 
                        
                        """;
    Assert.assertEquals(expected,ASCIILogos.TINKER_TOY.getVal());
}


@Test
public void TestTOMBSTONE()
{
    String expected = """
 _,  _,_ __, _,_  _,
 |   | | | \\ | | (_ 
 | , | | |_/ | | , )
 ~~~ `~' ~   `~'  ~ 
                    """;
    Assert.assertEquals(expected,ASCIILogos.TOMBSTONE.getVal());
}


@Test
public void TestTRAIN()
{
    String expected = """
   _                 _                   
  | |     _  _    __| |   _  _     ___   
  | |__  | +| |  / _` |  | +| |   (_-<   
  |____|  \\_,_|  \\__,_|   \\_,_|   /__/_  
_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"| 
\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-' """;
    Assert.assertEquals(expected,ASCIILogos.TRAIN.getVal());
}


@Test
public void TestTWO_POINT()
{
    String expected = """
|     _|    _
|_|_|(_||_|_\\""";
    Assert.assertEquals(expected,ASCIILogos.TWO_POINT.getVal());
}


@Test
public void TestUSA_FLAG()
{
    String expected = """
 :::      :::  === :::====  :::  === :::=== 
 :::      :::  === :::  === :::  === :::    
 ===      ===  === ===  === ===  ===  ===== 
 ===      ===  === ===  === ===  ===     ===
 ========  ======  =======   ======  ====== 
                                            """;
    Assert.assertEquals(expected,ASCIILogos.USA_FLAG.getVal());
}


@Test
public void TestWEIRD()
{
    String expected = """
                         
 /            |          
(          ___|      ___ 
|   )|   )|   )|   )|___ 
|__/ |__/ |__/ |__/  __/ 
                         """;
    Assert.assertEquals(expected,ASCIILogos.WEIRD.getVal());
}


@Test
public void TestTHREE_D()
{
    String expected = """
 **                    **                
/**                   /**                
/**       **   **     /** **   **  ******
/**      /**  /**  ******/**  /** **//// 
/**      /**  /** **///**/**  /**//***** 
/**      /**  /**/**  /**/**  /** /////**
/********//******//******//****** ****** 
////////  //////  //////  ////// //////  """;
    Assert.assertEquals(expected,ASCIILogos.THREE_D.getVal());
}


@Test
public void TestWET_LETTER()
{
    String expected = """
,-.    .-. .-. ,'|\"\\   .-. .-.   .---. 
| |    | | | | | |\\ \\  | | | |  ( .-._)
| |    | | | | | | \\ \\ | | | | (_) \\   
| |    | | | | | |  \\ \\| | | | _  \\ \\  
| `--. | `-')| /(|`-' /| `-')|( `-'  ) 
|( __.'`---(_)(__)`--' `---(_) `----'  
(_)                                    """;
    Assert.assertEquals(expected,ASCIILogos.WET_LETTER.getVal());
}


@Test
public void TestTHREED_ASCII()
{
    String expected = """
 ___       ___  ___  ________  ___  ___  ________      
|\\  \\     |\\  \\|\\  \\|\\   ___ \\|\\  \\|\\  \\|\\   ____\\     
\\ \\  \\    \\ \\  \\\\\\  \\ \\  \\_|\\ \\ \\  \\\\\\  \\ \\  \\___|_    
 \\ \\  \\    \\ \\  \\\\\\  \\ \\  \\ \\\\ \\ \\  \\\\\\  \\ \\_____  \\   
  \\ \\  \\____\\ \\  \\\\\\  \\ \\  \\_\\\\ \\ \\  \\\\\\  \\|____|\\  \\  
   \\ \\_______\\ \\_______\\ \\_______\\ \\_______\\____\\_\\  \\ 
    \\|_______|\\|_______|\\|_______|\\|_______|\\_________\\
                                           \\|_________|
                                                       
                                                       """;
    Assert.assertEquals(expected,ASCIILogos.THREED_ASCII.getVal());
}


@Test
public void TestFIVE_LINE_OBLIQUE()
{
    String expected = """
                                                  
     / /                                          
    / /                  ___   /           ___    
   / /        //   / / //   ) / //   / / ((   ) ) 
  / /        //   / / //   / / //   / /   \\ \\     
 / /____/ / ((___( ( ((___/ / ((___( ( //   ) )   """;
    Assert.assertEquals(expected,ASCIILogos.FIVE_LINE_OBLIQUE.getVal());
}


@Test
public void TestAMC_AAA0ONE()
{
    String expected = """
S.       .S       S.    .S_sSSs     .S       S.     sSSs  
SS.     .SS       SS.  .SS~YS%%b   .SS       SS.   d%%SP  
S%S     S%S       S%S  S%S   `S%b  S%S       S%S  d%S'    
S%S     S%S       S%S  S%S    S%S  S%S       S%S  S%|     
S&S     S&S       S&S  S%S    S&S  S&S       S&S  S&S     
S&S     S&S       S&S  S&S    S&S  S&S       S&S  Y&Ss    
S&S     S&S       S&S  S&S    S&S  S&S       S&S  `S&&S   
S&S     S&S       S&S  S&S    S&S  S&S       S&S    `S*S  
S*b     S*b       d*S  S*S    d*S  S*b       d*S     l*S  
S*S.    S*S.     .S*S  S*S   .S*S  S*S.     .S*S    .S*P  
 SSSbs   SSSbs_sdSSS   S*S_sdSSS    SSSbs_sdSSS   sSS*S   
  YSSP    YSSP~YSSY    SSS~YSSY      YSSP~YSSY    YSS'    
                                                          
                                                          
                                                          """;
    Assert.assertEquals(expected,ASCIILogos.AMC_AAA0ONE.getVal());
}


@Test
public void TestAMC_SLASH()
{
    String expected = """
.s                                                
          .s    s.  .s5SSSs.  .s    s.  .s5SSSs.  
sS              SS.       SS.       SS.       SS. 
SS        sS    S%S sS    S%S sS    S%S sS    `:; 
SS        SS    S%S SS    S%S SS    S%S `:;;;;.   
SS        SS    S%S SS    S%S SS    S%S       ;;. 
SS        SS    `:; SS    `:; SS    `:;       `:; 
SS    ;,. SS    ;,. SS    ;,. SS    ;,. .,;   ;,. 
`:;;;;;:' `:;;;;;:' ;;;;;;;:' `:;;;;;:' `:;;;;;:' 
                                                  """;
    Assert.assertEquals(expected,ASCIILogos.AMC_SLASH.getVal());
}


@Test
public void TestWOW()
{
    String expected = """
][_ ][_][ ][_) ][_][ ((5 """;
    Assert.assertEquals(expected,ASCIILogos.WOW.getVal());
}


@Test
public void TestAMC_NEKO()
{
    String expected = """
SSSSS                                                       
SSSSS       .sSSS s.    .sSSSSs.    .sSSS s.    .sSSSSSSSs. 
S SSS       S SSS SSSs. S SSSSSSSs. S SSS SSSs. S SSS SSSS' 
S  SS       S  SS SSSSS S  SS SSSSS S  SS SSSSS S  SS       
S..SS       S..SS SSSSS S..SS SSSSS S..SS SSSSS `SSSSsSSSa. 
S:::S       S:::S SSSSS S:::S SSSSS S:::S SSSSS .sSSS SSSSS 
S;;;S       S;;;S SSSSS S;;;S SSSSS S;;;S SSSSS S;;;S SSSSS 
S%%%S SSSSS S%%%S SSSSS S%%%S SSSS' S%%%S SSSSS S%%%S SSSSS 
SSSSSsSS;:' SSSSSsSSSSS SSSSSsS;:'  SSSSSsSSSSS SSSSSsSSSSS 
                                                            """;
    Assert.assertEquals(expected,ASCIILogos.AMC_NEKO.getVal());
}


@Test
public void TestAMC_RAZORTWO()
{
    String expected = """
   .         . .       . .       . .       . .    
.+'|      .+'| |`+. .+'|=|`+. .+'| |`+. .+'|=|`+. 
|  |      |  | |  | |  | `+ | |  | |  | |  | `+.| 
|  |      |  | |  | |  |  | | |  | |  | |  | .    
|  |      |  | |  | |  |  | | |  | |  | `+.|=|`+. 
|  |    . |  | |  | |  |  | | |  | |  | .    |  | 
|  | .+'| |  | |  | |  | .+ | |  | |  | |`+. |  | 
`+.|=|.+' `+.|=|.+' `+.|=|.+' `+.|=|.+' `+.|=|.+' 
                                                  """;
    Assert.assertEquals(expected,ASCIILogos.AMC_RAZORTWO.getVal());
}


@Test
public void TestANSI_REGULAR()
{
    String expected = """
██      ██    ██ ██████  ██    ██ ███████ 
██      ██    ██ ██   ██ ██    ██ ██      
██      ██    ██ ██   ██ ██    ██ ███████ 
██      ██    ██ ██   ██ ██    ██      ██ 
███████  ██████  ██████   ██████  ███████ 
                                          
                                          """;
    Assert.assertEquals(expected,ASCIILogos.ANSI_REGULAR.getVal());
}


@Test
public void TestANSI_SHADOW()
{
    String expected = """
██╗     ██╗   ██╗██████╗ ██╗   ██╗███████╗
██║     ██║   ██║██╔══██╗██║   ██║██╔════╝
██║     ██║   ██║██║  ██║██║   ██║███████╗
██║     ██║   ██║██║  ██║██║   ██║╚════██║
███████╗╚██████╔╝██████╔╝╚██████╔╝███████║
╚══════╝ ╚═════╝ ╚═════╝  ╚═════╝ ╚══════╝
                                          """;
    Assert.assertEquals(expected,ASCIILogos.ANSI_SHADOW.getVal());
}


@Test
public void TestALLIGATORTWO()
{
    String expected = """
:::       :::    ::: :::::::::  :::    :::  ::::::::  
:+:       :+:    :+: :+:    :+: :+:    :+: :+:    :+: 
+:+       +:+    +:+ +:+    +:+ +:+    +:+ +:+        
+#+       +#+    +:+ +#+    +:+ +#+    +:+ +#++:++#++ 
+#+       +#+    +#+ +#+    +#+ +#+    +#+        +#+ 
#+#       #+#    #+# #+#    #+# #+#    #+# #+#    #+# 
########## ########  #########   ########   ########  """;
    Assert.assertEquals(expected,ASCIILogos.ALLIGATORTWO.getVal());
}


@Test
public void TestALLIGATOR()
{
    String expected = """
      :::       :::    ::: :::::::::  :::    :::  :::::::: 
     :+:       :+:    :+: :+:    :+: :+:    :+: :+:    :+: 
    +:+       +:+    +:+ +:+    +:+ +:+    +:+ +:+         
   +#+       +#+    +:+ +#+    +:+ +#+    +:+ +#++:++#++   
  +#+       +#+    +#+ +#+    +#+ +#+    +#+        +#+    
 #+#       #+#    #+# #+#    #+# #+#    #+# #+#    #+#     
########## ########  #########   ########   ########       """;
    Assert.assertEquals(expected,ASCIILogos.ALLIGATOR.getVal());
}


@Test
public void TestARROWS()
{
    String expected = """
>=>                    >=>                  
>=>                    >=>                  
>=>       >=>  >=>     >=> >=>  >=>  >===>  
>=>       >=>  >=>  >=>>=> >=>  >=> >=>     
>=>       >=>  >=> >>  >=> >=>  >=>   >==>  
>=>       >=>  >=> >>  >=> >=>  >=>     >=> 
>=======>   >==>=>  >=>>=>   >==>=> >=> >=> 
                                            """;
    Assert.assertEquals(expected,ASCIILogos.ARROWS.getVal());
}


@Test
public void TestBANNERTHREE_D()
{
    String expected = """
'##:::::::'##::::'##:'########::'##::::'##::'######::
 ##::::::: ##:::: ##: ##.... ##: ##:::: ##:'##... ##:
 ##::::::: ##:::: ##: ##:::: ##: ##:::: ##: ##:::..::
 ##::::::: ##:::: ##: ##:::: ##: ##:::: ##:. ######::
 ##::::::: ##:::: ##: ##:::: ##: ##:::: ##::..... ##:
 ##::::::: ##:::: ##: ##:::: ##: ##:::: ##:'##::: ##:
 ########:. #######:: ########::. #######::. ######::
........:::.......:::........::::.......::::......:::""";
    Assert.assertEquals(expected,ASCIILogos.BANNERTHREE_D.getVal());
}


@Test
public void TestBARBWIRE()
{
    String expected = """
><<                   ><<               
><<                   ><<               
><<      ><<  ><<     ><<><<  ><< ><<<< 
><<      ><<  ><< ><< ><<><<  ><<><<    
><<      ><<  ><<><   ><<><<  ><<  ><<< 
><<      ><<  ><<><   ><<><<  ><<    ><<
><<<<<<<<  ><<><< ><< ><<  ><<><<><< ><<
                                        """;
    Assert.assertEquals(expected,ASCIILogos.BARBWIRE.getVal());
}


@Test
public void TestBASIC()
{
    String expected = """
db      db    db d8888b. db    db .d8888. 
88      88    88 88  `8D 88    88 88'  YP 
88      88    88 88   88 88    88 `8bo.   
88      88    88 88   88 88    88   `Y8b. 
88booo. 88b  d88 88  .8D 88b  d88 db   8D 
Y88888P ~Y8888P' Y8888D' ~Y8888P' `8888Y' 
                                          
                                          """;
    Assert.assertEquals(expected,ASCIILogos.BASIC.getVal());
}


@Test
public void TestBEAR()
{
    String expected = """
   _     _      _     _      _     _      _     _      _     _   
  (c).-.(c)    (c).-.(c)    (c).-.(c)    (c).-.(c)    (c).-.(c)  
   / ._. \\      / ._. \\      / ._. \\      / ._. \\      / ._. \\   
 __\\( Y )/__  __\\( Y )/__  __\\( Y )/__  __\\( Y )/__  __\\( Y )/__ 
(_.-/'-'\\-._)(_.-/'-'\\-._)(_.-/'-'\\-._)(_.-/'-'\\-._)(_.-/'-'\\-._)
   || L ||      || U ||      || D ||      || U ||      || S ||   
 _.' `-' '._  _.' `-' '._  _.' `-' '._  _.' `-' '._  _.' `-' '._ 
(.-./`-'\\.-.)(.-./`-'\\.-.)(.-./`-'\\.-.)(.-./`-'\\.-.)(.-./`-`\\.-.)
 `-'     `-'  `-'     `-'  `-'     `-'  `-'     `-'  `-'     `-' """;
    Assert.assertEquals(expected,ASCIILogos.BEAR.getVal());
}


@Test
public void TestBIG_MONEY_NE()
{
    String expected = """
 /$$                       /$$                    
| $$                      | $$                    
| $$       /$$   /$$  /$$$$$$$ /$$   /$$  /$$$$$$$
| $$      | $$  | $$ /$$__  $$| $$  | $$ /$$_____/
| $$      | $$  | $$| $$  | $$| $$  | $$|  $$$$$$ 
| $$      | $$  | $$| $$  | $$| $$  | $$ \\____  $$
| $$$$$$$$|  $$$$$$/|  $$$$$$$|  $$$$$$/ /$$$$$$$/
|________/ \\______/  \\_______/ \\______/ |_______/ 
                                                  
                                                  
                                                  """;
    Assert.assertEquals(expected,ASCIILogos.BIG_MONEY_NE.getVal());
}


@Test
public void TestBIG_CHIEF()
{
    String expected = """
___________________________________
    _                              
    /                 /            
---/--------------__-/----------__-
  /      /   /  /   /   /   /  (_ `
_/____/_(___(__(___/___(___(__(__)_
                                   
                                   """;
    Assert.assertEquals(expected,ASCIILogos.BIG_CHIEF.getVal());
}


@Test
public void TestBIG_MONEY_NW()
{
    String expected = """
$$\\                      $$\\                     
$$ |                     $$ |                    
$$ |     $$\\   $$\\  $$$$$$$ |$$\\   $$\\  $$$$$$$\\ 
$$ |     $$ |  $$ |$$  __$$ |$$ |  $$ |$$  _____|
$$ |     $$ |  $$ |$$ /  $$ |$$ |  $$ |\\$$$$$$\\  
$$ |     $$ |  $$ |$$ |  $$ |$$ |  $$ | \\____$$\\ 
$$$$$$$$\\\\$$$$$$  |\\$$$$$$$ |\\$$$$$$  |$$$$$$$  |
\\________|\\______/  \\_______| \\______/ \\_______/ 
                                                 
                                                 
                                                 """;
    Assert.assertEquals(expected,ASCIILogos.BIG_MONEY_NW.getVal());
}


@Test
public void TestBLOODY()
{
    String expected = """
 ██▓     █    ██ ▓█████▄  █    ██   ██████ 
▓██▒     ██  ▓██▒▒██▀ ██▌ ██  ▓██▒▒██    ▒ 
▒██░    ▓██  ▒██░░██   █▌▓██  ▒██░░ ▓██▄   
▒██░    ▓▓█  ░██░░▓█▄   ▌▓▓█  ░██░  ▒   ██▒
░██████▒▒▒█████▓ ░▒████▓ ▒▒█████▓ ▒██████▒▒
░ ▒░▓  ░░▒▓▒ ▒ ▒  ▒▒▓  ▒ ░▒▓▒ ▒ ▒ ▒ ▒▓▒ ▒ ░
░ ░ ▒  ░░░▒░ ░ ░  ░ ▒  ▒ ░░▒░ ░ ░ ░ ░▒  ░ ░
  ░ ░    ░░░ ░ ░  ░ ░  ░  ░░░ ░ ░ ░  ░  ░  
    ░  ░   ░        ░       ░           ░  
                  ░                        """;
    Assert.assertEquals(expected,ASCIILogos.BLOODY.getVal());
}


@Test
public void TestBROADWAY()
{
    String expected = """
                                                                            
8 8888      8 8888      88 8 888888888o.      8 8888      88    d888888o.   
8 8888      8 8888      88 8 8888    `^888.   8 8888      88  .`8888:' `88. 
8 8888      8 8888      88 8 8888        `88. 8 8888      88  8.`8888.   Y8 
8 8888      8 8888      88 8 8888         `88 8 8888      88  `8.`8888.     
8 8888      8 8888      88 8 8888          88 8 8888      88   `8.`8888.    
8 8888      8 8888      88 8 8888          88 8 8888      88    `8.`8888.   
8 8888      8 8888      88 8 8888         ,88 8 8888      88     `8.`8888.  
8 8888      ` 8888     ,8P 8 8888        ,88' ` 8888     ,8P 8b   `8.`8888. 
8 8888        8888   ,d8P  8 8888    ,o88P'     8888   ,d8P  `8b.  ;8.`8888 
8 888888888888 `Y88888P'   8 888888888P'         `Y88888P'    `Y8888P ,88P' """;
    Assert.assertEquals(expected,ASCIILogos.BROADWAY.getVal());
}


@Test
public void TestBOLGER()
{
    String expected = """
888                    888                 
888     888  888  e88~\\888 888  888  d88~\\ 
888     888  888 d888  888 888  888 C888   
888     888  888 8888  888 888  888  Y88b  
888     888  888 Y888  888 888  888   888D 
888____ \"88_-888  \"88_/888 \"88_-888 \\_88P  
                                           """;
    Assert.assertEquals(expected,ASCIILogos.BOLGER.getVal());
}


@Test
public void TestCATWALK()
{
    String expected = """
_//                   _//               
_//                   _//               
_//      _//  _//     _//_//  _// _//// 
_//      _//  _// _// _//_//  _//_//    
_//      _//  _//_/   _//_//  _//  _/// 
_//      _//  _//_/   _//_//  _//    _//
_////////  _//_// _// _//  _//_//_// _//
                                        """;
    Assert.assertEquals(expected,ASCIILogos.CATWALK.getVal());
}


@Test
public void TestCHISELED()
{
    String expected = """
                                                 ,-,--.  
   _.-.    .--.-. .-.-. _,..---._  .--.-. .-.-.,-.'-  _\\ 
 .-,.'|   /==/ -|/=/  /==/,   -  \\/==/ -|/=/  /==/_ ,_.' 
|==|, |   |==| ,||=| -|==|   _   _\\==| ,||=| -\\==\\  \\    
|==|- |   |==|- | =/  |==|  .=.   |==|- | =/  |\\==\\ -\\   
|==|, |   |==|,  \\/ - |==|,|   | -|==|,  \\/ - |_\\==\\ ,\\  
|==|- `-._|==|-   ,   /==|  '='   /==|-   ,   /==/\\/ _ | 
/==/ - , ,/==/ , _  .'|==|-,   _`//==/ , _  .'\\==\\ - , / 
`--`-----'`--`..---'  `-.`.____.' `--`..---'   `--`---'  """;
    Assert.assertEquals(expected,ASCIILogos.CHISELED.getVal());
}


@Test
public void TestCOINSTAK()
{
    String expected = """
O))                   O))               
O))                   O))               
O))      O))  O))     O))O))  O)) O)))) 
O))      O))  O)) O)) O))O))  O))O))    
O))      O))  O))O)   O))O))  O))  O))) 
O))      O))  O))O)   O))O))  O))    O))
O))))))))  O))O)) O)) O))  O))O))O)) O))
                                        """;
    Assert.assertEquals(expected,ASCIILogos.COINSTAK.getVal());
}


@Test
public void TestCOLOSSAL()
{
    String expected = """
888                   888                   
888                   888                   
888                   888                   
888     888  888  .d88888 888  888 .d8888b  
888     888  888 d88\" 888 888  888 88K      
888     888  888 888  888 888  888 \"Y8888b. 
888     Y88b 888 Y88b 888 Y88b 888      X88 
88888888 \"Y88888  \"Y88888  \"Y88888  88888P' 
                                            
                                            
                                            """;
    Assert.assertEquals(expected,ASCIILogos.COLOSSAL.getVal());
}


@Test
public void TestCRICKET()
{
    String expected = """
  ___             __             
 |   |  .--.--.--|  .--.--.-----.
 |.  |  |  |  |  _  |  |  |__ --|
 |.  |__|_____|_____|_____|_____|
 |:  1   |                       
 |::.. . |                       
 `-------'                       
                                 """;
    Assert.assertEquals(expected,ASCIILogos.CRICKET.getVal());
}


@Test
public void TestDANCING_FONT()
{
    String expected = """
   _       _   _   ____     _   _   ____     
  |\"|   U |\"|u| | |  _\"\\ U |\"|u| | / __\"| u  
U | | u  \\| |\\| |/| | | | \\| |\\| |<\\___ \\/   
 \\| |/__  | |_| |U| |_| |\\ | |_| | u___) |   
  |_____|<<\\___/  |____/ u<<\\___/  |____/>>  
  //  \\\\(__) )(    |||_  (__) )(    )(  (__) 
 (_\")(\"_)   (__)  (__)_)     (__)  (__)      """;
    Assert.assertEquals(expected,ASCIILogos.DANCING_FONT.getVal());
}


@Test
public void TestDIAMOND()
{
    String expected = """
/\\\\                   /\\\\               
/\\\\                   /\\\\               
/\\\\      /\\\\  /\\\\     /\\\\/\\\\  /\\\\ /\\\\\\\\ 
/\\\\      /\\\\  /\\\\ /\\\\ /\\\\/\\\\  /\\\\/\\\\    
/\\\\      /\\\\  /\\\\/\\   /\\\\/\\\\  /\\\\  /\\\\\\ 
/\\\\      /\\\\  /\\\\/\\   /\\\\/\\\\  /\\\\    /\\\\
/\\\\\\\\\\\\\\\\  /\\\\/\\\\ /\\\\ /\\\\  /\\\\/\\\\/\\\\ /\\\\
                                        """;
    Assert.assertEquals(expected,ASCIILogos.DIAMOND.getVal());
}


@Test
public void TestDIGITAL()
{
    String expected = """
 +-+-+-+-+-+
 |L|u|d|u|s|
 +-+-+-+-+-+""";
    Assert.assertEquals(expected,ASCIILogos.DIGITAL.getVal());
}


@Test
public void TestDELTA_CORPS_PRIEST_ONE()
{
    String expected = """
 ▄█       ███    █▄  ████████▄  ███    █▄     ▄████████ 
███       ███    ███ ███   ▀███ ███    ███   ███    ███ 
███       ███    ███ ███    ███ ███    ███   ███    █▀  
███       ███    ███ ███    ███ ███    ███   ███        
███       ███    ███ ███    ███ ███    ███ ▀███████████ 
███       ███    ███ ███    ███ ███    ███          ███ 
███▌    ▄ ███    ███ ███   ▄███ ███    ███    ▄█    ███ 
█████▄▄██ ████████▀  ████████▀  ████████▀   ▄████████▀  
▀                                                       """;
    Assert.assertEquals(expected,ASCIILogos.DELTA_CORPS_PRIEST_ONE.getVal());
}


@Test
public void TestEPIC()
{
    String expected = """
 _                 ______            _______ 
( \\      |\\     /|(  __  \\ |\\     /|(  ____ \\
| (      | )   ( || (  \\  )| )   ( || (    \\/
| |      | |   | || |   ) || |   | || (_____ 
| |      | |   | || |   | || |   | |(_____  )
| |      | |   | || |   ) || |   | |      ) |
| (____/\\| (___) || (__/  )| (___) |/\\____) |
(_______/(_______)(______/ (_______)\\_______)
                                             """;
    Assert.assertEquals(expected,ASCIILogos.EPIC.getVal());
}


@Test
public void TestFIRE_FONT_K()
{
    String expected = """
 (                          
 )\\ )        (              
(()/(   (    )\\ )   (       
 /(_)) ))\\  (()/(  ))\\  (   
(_))  /((_)  ((_))/((_) )\\  
| |  (_))(   _| |(_))( ((_) 
| |__| || |/ _` || || |(_-< 
|____|\\_,_|\\__,_| \\_,_|/__/ 
                            """;
    Assert.assertEquals(expected,ASCIILogos.FIRE_FONT_K.getVal());
}


@Test
public void TestFIRE_FONT_S()
{
    String expected = """
 (                      
 )\\ )      (            
(()/(  (   )\\ )  (      
 /(_))))\\ (()/( ))\\ (   
(_)) /((_) ((_))((_))\\  
| | (_))(  _| (_))(((_) 
| |_| || / _` | || (_-< 
|____\\_,_\\__,_|\\_,_/__/ 
                        """;
    Assert.assertEquals(expected,ASCIILogos.FIRE_FONT_S.getVal());
}


@Test
public void TestFUN_FACES()
{
    String expected = """
  W  W    wWw  wWw  _     wWw  wWw  oo_    
 (O)(O)   (O)  (O) /||_   (O)  (O) /  _)-< 
   ||     / )  ( \\  /o_)  / )  ( \\ \\__ `.  
   | \\   / /    \\ \\/ |(\\ / /    \\ \\   `. | 
   |  `. | \\____/ || | ))| \\____/ |   _| | 
  (.-.__)'. `--' .`| |// '. `--' .`,-'   | 
   `-'     `-..-'  \\__/    `-..-' (_..--'  """;
    Assert.assertEquals(expected,ASCIILogos.FUN_FACES.getVal());
}


@Test
public void TestFLOWER_POWER()
{
    String expected = """
  .---.      ___    _  ______       ___    _    .-'''-.  
  | ,_|    .'   |  | ||    _ `''. .'   |  | |  / _     \\ 
,-./  )    |   .'  | || _ | ) _  \\|   .'  | | (`' )/`--' 
\\  '_ '`)  .'  '_  | ||( ''_'  ) |.'  '_  | |(_ o _).    
 > (_)  )  '   ( \\.-.|| . (_) `. |'   ( \\.-.| (_,_). '.  
(  .  .-'  ' (`. _` /||(_    ._) '' (`. _` /|.---.  \\  : 
 `-'`-'|___| (_ (_) _)|  (_.\\.' / | (_ (_) _)\\    `-'  | 
  |        \\\\ /  . \\ /|       .'   \\ /  . \\ / \\       /  
  `--------` ``-'`-'' '-----'`      ``-'`-''   `-...-'   
                                                         """;
    Assert.assertEquals(expected,ASCIILogos.FLOWER_POWER.getVal());
}


@Test
public void TestGHOULISH()
{
    String expected = """
 .')           .-.     )\\.-.       .-.    )\\.--.  
( /        ,'  /  )  ,'     )  ,'  /  )  (   ._.' 
 ))       (  ) | (  (  .-, (  (  ) | (    `-.`.   
 )'._.-.   ) '._\\ )  ) '._\\ )  ) '._\\ )  ,_ (  \\  
(       ) (  ,   (  (  ,   (  (  ,   (  (  '.)  ) 
 )/,__.'   )/ ._.'   )/ ._.'   )/ ._.'   '._,_.'  
                                                  """;
    Assert.assertEquals(expected,ASCIILogos.GHOULISH.getVal());
}


@Test
public void TestGHOST()
{
    String expected = """
                      _ .-') _                 .-')    
                     ( (  OO) )               ( OO ).  
 ,--.     ,--. ,--.   \\     .'_  ,--. ,--.   (_)---\\_) 
 |  |.-') |  | |  |   ,`'--..._) |  | |  |   /    _ |  
 |  | OO )|  | | .-') |  |  \\  ' |  | | .-') \\  :` `.  
 |  |`-' ||  |_|( OO )|  |   ' | |  |_|( OO ) '..`''.) 
(|  '---.'|  | | `-' /|  |   / : |  | | `-' /.-._)   \\ 
 |      |('  '-'(_.-' |  '--'  /('  '-'(_.-' \\       / 
 `------'  `-----'    `-------'   `-----'     `-----'  """;
    Assert.assertEquals(expected,ASCIILogos.GHOST.getVal());
}


@Test
public void TestGOTHIC()
{
    String expected = """
                                
_-_-           |\\               
 /,             \\\\              
 ||     \\\\ \\\\  / \\\\ \\\\ \\\\  _-_, 
~||     || || || || || || ||_.  
 ||     || || || || || ||  ~ || 
(  -__, \\\\/\\\\  \\\\/  \\\\/\\\\ ,-_-  
                                
                                """;
    Assert.assertEquals(expected,ASCIILogos.GOTHIC.getVal());
}


@Test
public void TestGRACEFUL()
{
    String expected = """
 __    _  _  ____  _  _  ____ 
(  )  / )( \\(    \\/ )( \\/ ___)
/ (_/\\) \\/ ( ) D () \\/ (\\___ \\
\\____/\\____/(____/\\____/(____/""";
    Assert.assertEquals(expected,ASCIILogos.GRACEFUL.getVal());
}


@Test
public void TestGRADIENT()
{
    String expected = """
eee....eee..eee.eeeeeee..eee..eee..eeeeee.
@@@::::@@@::@@@:@@@@@@@@:@@@::@@@:@@@@@@@:
%%%----%%%--%%%-%%%--%%%-%%%--%%%-%%%-----
&&&++++&&&++&&&+&&&++&&&+&&&++&&&+&&&&&&++
|||****|||**|||*|||**|||*|||**|||**||||||*
!!!====!!!==!!!=!!!==!!!=!!!==!!!=====!!!=
::::::#::::::::#::::::::#::::::::#:::::::#
......@@......@@.......@@@......@@......@@
                                          """;
    Assert.assertEquals(expected,ASCIILogos.GRADIENT.getVal());
}


@Test
public void TestGREEK()
{
    String expected = """
                                 
                 __              
    /\\          / _)             
   /  \\  _   _  \\ \\  _   _  ____ 
  / /\\ \\| | | |/ _ \\| | | |/  ._)
 / /  \\ \\ |_| ( (_) ) |_| ( () ) 
/_/    \\_\\___/ \\___/ \\___/ \\__/  
                                 
                                 """;
    Assert.assertEquals(expected,ASCIILogos.GREEK.getVal());
}


@Test
public void TestHENRY_THREED()
{
    String expected = """
    _                      _                       
   FJ        _    _     ___FJ    _    _     ____   
  J |       J |  | L   F __  L  J |  | L   F ___J  
  | |       | |  | |  | |--| |  | |  | |  | '----_ 
  F L_____  F L__J J  F L__J J  F L__J J  )-____  L
 J________LJ\\____,__LJ\\____,__LJ\\____,__LJ\\______/F
 |________| J____,__F J____,__F J____,__F J______F 
                                                   """;
    Assert.assertEquals(expected,ASCIILogos.HENRY_THREED.getVal());
}


@Test
public void TestISOMETRICONE()
{
    String expected = """
      ___       ___           ___           ___           ___     
     /\\__\\     /\\__\\         /\\  \\         /\\__\\         /\\  \\    
    /:/  /    /:/  /        /::\\  \\       /:/  /        /::\\  \\   
   /:/  /    /:/  /        /:/\\:\\  \\     /:/  /        /:/\\ \\  \\  
  /:/  /    /:/  /  ___   /:/  \\:\\__\\   /:/  /  ___   _\\:\\~\\ \\  \\ 
 /:/__/    /:/__/  /\\__\\ /:/__/ \\:|__| /:/__/  /\\__\\ /\\ \\:\\ \\ \\__\\
 \\:\\  \\    \\:\\  \\ /:/  / \\:\\  \\ /:/  / \\:\\  \\ /:/  / \\:\\ \\:\\ \\/__/
  \\:\\  \\    \\:\\  /:/  /   \\:\\  /:/  /   \\:\\  /:/  /   \\:\\ \\:\\__\\  
   \\:\\  \\    \\:\\/:/  /     \\:\\/:/  /     \\:\\/:/  /     \\:\\/:/  /  
    \\:\\__\\    \\::/  /       \\::/__/       \\::/  /       \\::/  /   
     \\/__/     \\/__/         ~~            \\/__/         \\/__/    """;
    Assert.assertEquals(expected,ASCIILogos.ISOMETRICONE.getVal());
}


@Test
public void TestISOMETRICTWO()
{
    String expected = """
                    ___                         ___           ___     
                   /\\  \\         _____         /\\  \\         /\\__\\    
                   \\:\\  \\       /::\\  \\        \\:\\  \\       /:/ _/_   
                    \\:\\  \\     /:/\\:\\  \\        \\:\\  \\     /:/ /\\  \\  
  ___     ___   ___  \\:\\  \\   /:/  \\:\\__\\   ___  \\:\\  \\   /:/ /::\\  \\ 
 /\\  \\   /\\__\\ /\\  \\  \\:\\__\\ /:/__/ \\:|__| /\\  \\  \\:\\__\\ /:/_/:/\\:\\__\\
 \\:\\  \\ /:/  / \\:\\  \\ /:/  / \\:\\  \\ /:/  / \\:\\  \\ /:/  / \\:\\/:/ /:/  /
  \\:\\  /:/  /   \\:\\  /:/  /   \\:\\  /:/  /   \\:\\  /:/  /   \\::/ /:/  / 
   \\:\\/:/  /     \\:\\/:/  /     \\:\\/:/  /     \\:\\/:/  /     \\/_/:/  /  
    \\::/  /       \\::/  /       \\::/  /       \\::/  /        /:/  /   
     \\/__/         \\/__/         \\/__/         \\/__/         \\/__/    """;
    Assert.assertEquals(expected,ASCIILogos.ISOMETRICTWO.getVal());
}


@Test
public void TestISOMETRICTHREE()
{
    String expected = """
                    ___          _____          ___           ___     
                   /__/\\        /  /::\\        /__/\\         /  /\\    
                   \\  \\:\\      /  /:/\\:\\       \\  \\:\\       /  /:/_   
  ___     ___       \\  \\:\\    /  /:/  \\:\\       \\  \\:\\     /  /:/ /\\  
 /__/\\   /  /\\  ___  \\  \\:\\  /__/:/ \\__\\:|  ___  \\  \\:\\   /  /:/ /::\\ 
 \\  \\:\\ /  /:/ /__/\\  \\__\\:\\ \\  \\:\\ /  /:/ /__/\\  \\__\\:\\ /__/:/ /:/\\:\\
  \\  \\:\\  /:/  \\  \\:\\ /  /:/  \\  \\:\\  /:/  \\  \\:\\ /  /:/ \\  \\:\\/:/~/:/
   \\  \\:\\/:/    \\  \\:\\  /:/    \\  \\:\\/:/    \\  \\:\\  /:/   \\  \\::/ /:/ 
    \\  \\::/      \\  \\:\\/:/      \\  \\::/      \\  \\:\\/:/     \\__\\/ /:/  
     \\__\\/        \\  \\::/        \\__\\/        \\  \\::/        /__/:/   
                   \\__\\/                       \\__\\/         \\__\\/    """;
    Assert.assertEquals(expected,ASCIILogos.ISOMETRICTHREE.getVal());
}


@Test
public void TestISOMETRICFOUR()
{
    String expected = """
      ___       ___           ___           ___           ___     
     /  /\\     /  /\\         /  /\\         /  /\\         /  /\\    
    /  /:/    /  /:/        /  /::\\       /  /:/        /  /::\\   
   /  /:/    /  /:/        /  /:/\\:\\     /  /:/        /__/:/\\:\\  
  /  /:/    /  /:/        /  /:/  \\:\\   /  /:/        _\\_ \\:\\ \\:\\ 
 /__/:/    /__/:/     /\\ /__/:/ \\__\\:| /__/:/     /\\ /__/\\ \\:\\ \\:\\
 \\  \\:\\    \\  \\:\\    /:/ \\  \\:\\ /  /:/ \\  \\:\\    /:/ \\  \\:\\ \\:\\_\\/
  \\  \\:\\    \\  \\:\\  /:/   \\  \\:\\  /:/   \\  \\:\\  /:/   \\  \\:\\_\\:\\  
   \\  \\:\\    \\  \\:\\/:/     \\  \\:\\/:/     \\  \\:\\/:/     \\  \\:\\/:/  
    \\  \\:\\    \\  \\::/       \\__\\::/       \\  \\::/       \\  \\::/   
     \\__\\/     \\__\\/            ~~         \\__\\/         \\__\\/    """;
    Assert.assertEquals(expected,ASCIILogos.ISOMETRICFOUR.getVal());
}


@Test
public void TestIVRIT()
{
    String expected = """
                _       _     
  ___ _   _  __| |_   _| |    
 / __| | | |/ _` | | | | |    
 \\__ \\ |_| | (_| | |_| | |___ 
 |___/\\__,_|\\__,_|\\__,_|_____|
                              """;
    Assert.assertEquals(expected,ASCIILogos.IVRIT.getVal());
}


@Test
public void TestJACKY()
{
    String expected = """
 _____       __    __   ______     __    __    _____  
(_   _)      ) )  ( (  (_  __ \\    ) )  ( (   / ____\\ 
  | |       ( (    ) )   ) ) \\ \\  ( (    ) ) ( (___   
  | |        ) )  ( (   ( (   ) )  ) )  ( (   \\___ \\  
  | |   __  ( (    ) )   ) )  ) ) ( (    ) )      ) ) 
__| |___) )  ) \\__/ (   / /__/ /   ) \\__/ (   ___/ /  
\\________/   \\______/  (______/    \\______/  /____/   
                                                      """;
    Assert.assertEquals(expected,ASCIILogos.JACKY.getVal());
}


@Test
public void TestJERUSALEM()
{
    String expected = """
                              
 _______ ___   ____ ___ _     
|____   |_  | |__  |_  | |    
     | |  | |    | | | | |    
     | |  | |____| | | | |___ 
     |_|  |_/____/\\_\\|_|_____|
                              """;
    Assert.assertEquals(expected,ASCIILogos.JERUSALEM.getVal());
}


@Test
public void TestJAZMINE()
{
    String expected = """
                                  
o                 8               
8                 8               
8     o    o .oPYo8 o    o .oPYo. 
8     8    8 8    8 8    8 Yb..   
8     8    8 8    8 8    8   'Yb. 
8oooo `YooP' `YooP' `YooP' `YooP' 
......:.....::.....::.....::.....:
::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::""";
    Assert.assertEquals(expected,ASCIILogos.JAZMINE.getVal());
}


@Test
public void TestKATAKANA()
{
    String expected = """
  #       # ##########      #     ########## ########## 
#  #     #           # ##########          # #        # 
 #      #           #       #             #          #  
      ##    ########     #  # #   ########          #   
    ##          ##      #   #  #      ##           #    
  ##          ##       #   ##   #   ##           ##     
##          ##              #     ##           ##       
                                                        """;
    Assert.assertEquals(expected,ASCIILogos.KATAKANA.getVal());
}


@Test
public void TestKEYBOARD()
{
    String expected = """
                                         
 _______ _______ _______ _______ _______ 
|\\     /|\\     /|\\     /|\\     /|\\     /|
| +---+ | +---+ | +---+ | +---+ | +---+ |
| |   | | |   | | |   | | |   | | |   | |
| |L  | | |u  | | |d  | | |u  | | |s  | |
| +---+ | +---+ | +---+ | +---+ | +---+ |
|/_____\\|/_____\\|/_____\\|/_____\\|/_____\\|
                                         """;
    Assert.assertEquals(expected,ASCIILogos.KEYBOARD.getVal());
}


@Test
public void TestLARRY_THREED()
{
    String expected = """
 __                  __                    
/\\ \\                /\\ \\                   
\\ \\ \\      __  __   \\_\\ \\  __  __    ____  
 \\ \\ \\  __/\\ \\/\\ \\  /'_` \\/\\ \\/\\ \\  /',__\\ 
  \\ \\ \\L\\ \\ \\ \\_\\ \\/\\ \\L\\ \\ \\ \\_\\ \\/\\__, `\\
   \\ \\____/\\ \\____/\\ \\___,_\\ \\____/\\/\\____/
    \\/___/  \\/___/  \\/__,_ /\\/___/  \\/___/ 
                                           
                                           """;
    Assert.assertEquals(expected,ASCIILogos.LARRY_THREED.getVal());
}


@Test
public void TestLARRY_THREED_TWO()
{
    String expected = """
 __                  __                    
/\\ \\                /\\ \\                   
\\ \\ \\      __  __   \\_\\ \\  __  __    ____  
 \\ \\ \\  __/\\ \\/\\ \\  /'_` \\/\\ \\/\\ \\  /',__\\ 
  \\ \\ \\L\\ \\ \\ \\_\\ \\/\\ \\L\\ \\ \\ \\_\\ \\/\\__, `\\
   \\ \\____/\\ \\____/\\ \\___,_\\ \\____/\\/\\____/
    \\/___/  \\/___/  \\/__,_ /\\/___/  \\/___/ 
                                           
                                           """;
    Assert.assertEquals(expected,ASCIILogos.LARRY_THREED_TWO.getVal());
}


@Test
public void TestLIL_DEVIL()
{
    String expected = """
                    _(`-')               (`-').-> 
   <-.        .->  ( (OO ).->     .->    ( OO)_   
 ,--. )  ,--.(,--.  \\    .'_ ,--.(,--.  (_)--\\_)  
 |  (`-')|  | |(`-')'`'-..__)|  | |(`-')/    _ /  
 |  |OO )|  | |(OO )|  |  ' ||  | |(OO )\\_..`--.  
(|  '__ ||  | | |  \\|  |  / :|  | | |  \\.-._)   \\ 
 |     |'\\  '-'(_ .'|  '-'  /\\  '-'(_ .'\\       / 
 `-----'  `-----'   `------'  `-----'    `-----'  """;
    Assert.assertEquals(expected,ASCIILogos.LIL_DEVIL.getVal());
}


@Test
public void TestMARQUEE()
{
    String expected = """
.::                   .::               
.::                   .::               
.::      .::  .::     .::.::  .:: .:::: 
.::      .::  .:: .:: .::.::  .::.::    
.::      .::  .::.:   .::.::  .::  .::: 
.::      .::  .::.:   .::.::  .::    .::
.::::::::  .::.:: .:: .::  .::.::.:: .::
                                        """;
    Assert.assertEquals(expected,ASCIILogos.MARQUEE.getVal());
}


@Test
public void TestMERLINONE()
{
    String expected = """
 ___       ____  ____  ________   ____  ____   ________  
|\"  |     (\"  _||_ \" ||\"      \"\\ (\"  _||_ \" | /\"       ) 
||  |     |   (  ) : |(.  ___  :)|   (  ) : |(:   \\___/  
|:  |     (:  |  | . )|: \\   ) ||(:  |  | . ) \\___  \\    
 \\  |___   \\\\ \\__/ // (| (___\\ || \\\\ \\__/ //   __/  \\\\   
( \\_|:  \\  /\\\\ __ //\\ |:       :) /\\\\ __ //\\  /\" \\   :)  
 \\_______)(__________)(________/ (__________)(_______/   
                                                         """;
    Assert.assertEquals(expected,ASCIILogos.MERLINONE.getVal());
}


@Test
public void TestMERLINTWO()
{
    String expected = """
   _             _       _           _       _     
 _/\\\\_      ___ /\\\\   __/\\\\___  ___ /\\\\     /\\\\__  
(_  _))    /  //\\ \\\\ (_  ____))/  //\\ \\\\   /    \\\\ 
 /  \\\\     \\:.\\\\_\\ \\\\ /   _ \\\\ \\:.\\\\_\\ \\\\ _\\  \\_// 
/:.  \\\\__   \\  :.  ///:. |_\\ \\\\ \\  :.  //// \\:.\\   
\\__  ____))(_   ___))\\  _____//(_   ___))\\\\__  /   
   \\//       \\//      \\//        \\//        \\\\/    
                                                   
                                                   """;
    Assert.assertEquals(expected,ASCIILogos.MERLINTWO.getVal());
}


@Test
public void TestMINI()
{
    String expected = """
                   
 |       _|      _ 
 |_ |_| (_| |_| _> 
                   """;
    Assert.assertEquals(expected,ASCIILogos.MINI.getVal());
}


@Test
public void TestMIRROR()
{
    String expected = """
           _              _ 
 ___ _   _| |__  _   _   | |
|__ | | | | '_ \\| | | |  | |
/ __| |_| | |_) | |_| ___| |
\\___|_.__/|_.__/|_.__|_____|
                            """;
    Assert.assertEquals(expected,ASCIILogos.MIRROR.getVal());
}


@Test
public void TestNT_GREEK()
{
    String expected = """
                                 
                 __              
    /\\          / _)             
   /  \\  _   _  \\ \\  _   _  ____ 
  / /\\ \\| | | |/ _ \\| | | |/  ._)
 / /  \\ \\ |_| ( (_) ) |_| ( () ) 
/_/    \\_\\___/ \\___/ \\___/ \\__/  
                                 
                                 """;
    Assert.assertEquals(expected,ASCIILogos.NT_GREEK.getVal());
}


@Test
public void TestNANCYJ_FANCY()
{
    String expected = """
M\"\"MMMMMMMM                dP                   
M  MMMMMMMM                88                   
M  MMMMMMMM dP    dP .d888b88 dP    dP .d8888b. 
M  MMMMMMMM 88    88 88'  `88 88    88 Y8ooooo. 
M  MMMMMMMM 88.  .88 88.  .88 88.  .88       88 
M         M `88888P' `88888P8 `88888P' `88888P' 
MMMMMMMMMMM                                     
                                                """;
    Assert.assertEquals(expected,ASCIILogos.NANCYJ_FANCY.getVal());
}


@Test
public void TestNANCYJ_UNDERLINED()
{
    String expected = """
dP                       dP                   
88                       88                   
88        dP    dP .d888b88 dP    dP .d8888b. 
88        88    88 88'  `88 88    88 Y8ooooo. 
88        88.  .88 88.  .88 88.  .88       88 
88888888P `88888P' `88888P8 `88888P' `88888P' 
oooooooooooooooooooooooooooooooooooooooooooooo
                                              """;
    Assert.assertEquals(expected,ASCIILogos.NANCYJ_UNDERLINED.getVal());
}


@Test
public void TestNANCYJ_IMPROVED()
{
    String expected = """
dP                       dP                   
88                       88                   
88        dP    dP .d888b88 dP    dP .d8888b. 
88        88    88 88'  `88 88    88 Y8ooooo. 
88        88.  .88 88.  .88 88.  .88       88 
88888888P `88888P' `88888P8 `88888P' `88888P' 
                                              
                                              """;
    Assert.assertEquals(expected,ASCIILogos.NANCYJ_IMPROVED.getVal());
}


@Test
public void TestNANCYJ()
{
    String expected = """
dP                       dP                   
88                       88                   
88        dP    dP .d888b88 dP    dP .d8888b. 
88        88    88 88'  `88 88    88 Y8ooooo. 
88        88.  .88 88.  .88 88.  .88       88 
88888888P `88888P' `88888P8 `88888P' `88888P' 
                                              
                                              """;
    Assert.assertEquals(expected,ASCIILogos.NANCYJ.getVal());
}


@Test
public void TestNIPPLES()
{
    String expected = """
{__                   {__               
{__                   {__               
{__      {__  {__     {__{__  {__ {____ 
{__      {__  {__ {__ {__{__  {__{__    
{__      {__  {__{_   {__{__  {__  {___ 
{__      {__  {__{_   {__{__  {__    {__
{________  {__{__ {__ {__  {__{__{__ {__
                                        """;
    Assert.assertEquals(expected,ASCIILogos.NIPPLES.getVal());
}


@Test
public void TestOSTWO()
{
    String expected = """
oo___________________oo________________
oo______oo____o__oooooo_oo____o__oooo__
oo______oo____o_oo___oo_oo____o_oo___o_
oo______oo____o_oo___oo_oo____o___oo___
oo______ooo___o_oo___oo_ooo___o_o___oo_
ooooooo_oo_ooo___oooooo_oo_ooo___oooo__
_______________________________________""";
    Assert.assertEquals(expected,ASCIILogos.OSTWO.getVal());
}


@Test
public void TestO8()
{
    String expected = """
ooooo                        oooo                        
 888       oooo  oooo   ooooo888 oooo  oooo   oooooooo8  
 888        888   888 888    888  888   888  888ooooooo  
 888      o 888   888 888    888  888   888          888 
o888ooooo88  888o88 8o  88ooo888o  888o88 8o 88oooooo88  
                                                         """;
    Assert.assertEquals(expected,ASCIILogos.O8.getVal());
}


@Test
public void TestPAGGA()
{
    String expected = """
░█░░░█░█░█▀▄░█░█░█▀▀
░█░░░█░█░█░█░█░█░▀▀█
░▀▀▀░▀▀▀░▀▀░░▀▀▀░▀▀▀""";
    Assert.assertEquals(expected,ASCIILogos.PAGGA.getVal());
}


@Test
public void TestPATORJKS_CHEESE()
{
    String expected = """
                                                                     
 ____         ____   ____      _____    ____   ____          ______  
|    |       |    | |    | ___|\\    \\  |    | |    |     ___|\\     \\ 
|    |       |    | |    ||    |\\    \\ |    | |    |    |    |\\     \\
|    |       |    | |    ||    | |    ||    | |    |    |    |/____/|
|    |  ____ |    | |    ||    | |    ||    | |    | ___|    \\|   | |
|    | |    ||    | |    ||    | |    ||    | |    ||    \\    \\___|/ 
|    | |    ||    | |    ||    | |    ||    | |    ||    |\\     \\    
|____|/____/||\\___\\_|____||____|/____/||\\___\\_|____||\\ ___\\|_____|   
|    |     ||| |    |    ||    /    | || |    |    || |    |     |   
|____|_____|/ \\|____|____||____|____|/  \\|____|____| \\|____|_____|   
  \\(    )/       \\(   )/    \\(    )/       \\(   )/      \\(    )/     
   '    '         '   '      '    '         '   '        '    '      
                                                                     """;
    Assert.assertEquals(expected,ASCIILogos.PATORJKS_CHEESE.getVal());
}


@Test
public void TestPAWP()
{
    String expected = """
                                  
 _                 _              
(_)               (_)        ____ 
(_)     _   _   __(_) _   _ (____)
(_)    (_) (_) (____)(_) (_)(_)__ 
(_)____(_)_(_)(_)_(_)(_)_(_) _(__)
(______)(___)  (____) (___) (____)
                                  
                                  """;
    Assert.assertEquals(expected,ASCIILogos.PAWP.getVal());
}


@Test
public void TestPEAKS()
{
    String expected = """
/^^                   /^^               
/^^                   /^^               
/^^      /^^  /^^     /^^/^^  /^^ /^^^^ 
/^^      /^^  /^^ /^^ /^^/^^  /^^/^^    
/^^      /^^  /^^/^   /^^/^^  /^^  /^^^ 
/^^      /^^  /^^/^   /^^/^^  /^^    /^^
/^^^^^^^^  /^^/^^ /^^ /^^  /^^/^^/^^ /^^
                                        """;
    Assert.assertEquals(expected,ASCIILogos.PEAKS.getVal());
}


@Test
public void TestPEBBLES()
{
    String expected = """
 o                  o              
O                  O               
o                  o               
o                  o               
O       O   o  .oOoO  O   o  .oOo  
O       o   O  o   O  o   O  `Ooo. 
o     . O   o  O   o  O   o      O 
OOoOooO `OoO'o `OoO'o `OoO'o `OoO' 
                                   
                                   """;
    Assert.assertEquals(expected,ASCIILogos.PEBBLES.getVal());
}


@Test
public void TestPEAKS_SLANT()
{
    String expected = """
     _/\\/\\__________________________/\\/\\_________________________
    _/\\/\\________/\\/\\__/\\/\\________/\\/\\__/\\/\\__/\\/\\____/\\/\\/\\/\\_ 
   _/\\/\\________/\\/\\__/\\/\\____/\\/\\/\\/\\__/\\/\\__/\\/\\__/\\/\\/\\/\\___  
  _/\\/\\________/\\/\\__/\\/\\__/\\/\\__/\\/\\__/\\/\\__/\\/\\________/\\/\\_   
 _/\\/\\/\\/\\/\\____/\\/\\/\\/\\____/\\/\\/\\/\\____/\\/\\/\\/\\__/\\/\\/\\/\\___    
____________________________________________________________     """;
    Assert.assertEquals(expected,ASCIILogos.PEAKS_SLANT.getVal());
}


@Test
public void TestPOISON()
{
    String expected = """
                                                  
@@@       @@@  @@@  @@@@@@@   @@@  @@@   @@@@@@   
@@@       @@@  @@@  @@@@@@@@  @@@  @@@  @@@@@@@   
@@!       @@!  @@@  @@!  @@@  @@!  @@@  !@@       
!@!       !@!  @!@  !@!  @!@  !@!  @!@  !@!       
@!!       @!@  !@!  @!@  !@!  @!@  !@!  !!@@!!    
!!!       !@!  !!!  !@!  !!!  !@!  !!!   !!@!!!   
!!:       !!:  !!!  !!:  !!!  !!:  !!!       !:!  
 :!:      :!:  !:!  :!:  !:!  :!:  !:!      !:!   
 :: ::::  ::::: ::   :::: ::  ::::: ::  :::: ::   
: :: : :   : :  :   :: :  :    : :  :   :: : :    
                                                  """;
    Assert.assertEquals(expected,ASCIILogos.POISON.getVal());
}


@Test
public void TestRAMMSTEIN()
{
    String expected = """
     _____                                     
  __|_    |__  __   _  _____   __   _  ______  
 |    |      ||  | | ||     \\ |  | | ||   ___| 
 |    |_     ||  |_| ||      \\|  |_| | `-.`-.  
 |______|  __||______||______/|______||______| 
    |_____|                                    
                                               """;
    Assert.assertEquals(expected,ASCIILogos.RAMMSTEIN.getVal());
}


@Test
public void TestRELIEFTWO()
{
    String expected = """
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/// \\\\\\\\\\\\\\/// \\\\/// \\//////// \\\\/// \\\\/// \\\\/////// \\\\
/// \\\\\\\\\\\\\\/// \\\\/// \\/// \\\\/// \\/// \\\\/// \\/// \\\\\\\\\\\\\\
/// \\\\\\\\\\\\\\/// \\\\/// \\/// \\\\/// \\/// \\\\/// \\\\/////// \\\\
/// \\\\\\\\\\\\\\/// \\\\/// \\/// \\\\/// \\/// \\\\/// \\\\\\\\\\\\\\/// \\
///////// \\\\/////// \\\\//////// \\\\\\/////// \\\\\\/////// \\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\""";
    Assert.assertEquals(expected,ASCIILogos.RELIEFTWO.getVal());
}


@Test
public void TestRED_PHOENIX()
{
    String expected = """
.____                .___              
|    |     __ __   __| _/__ __  ______ 
|    |    |  |  \\ / __ ||  |  \\/  ___/ 
|    |___ |  |  // /_/ ||  |  /\\___ \\  
|_______ \\|____/ \\____ ||____//____  > 
        \\/            \\/           \\/  
                                       """;
    Assert.assertEquals(expected,ASCIILogos.RED_PHOENIX.getVal());
}


@Test
public void TestRELIEF()
{
    String expected = """
_______________________________________________________
/~~\\_______/~~\\__/~~\\_/~~~~~~~\\__/~~\\__/~~\\__/~~~~~~\\__
/~~\\_______/~~\\__/~~\\_/~~\\__/~~\\_/~~\\__/~~\\_/~~\\_______
/~~\\_______/~~\\__/~~\\_/~~\\__/~~\\_/~~\\__/~~\\__/~~~~~~\\__
/~~\\_______/~~\\__/~~\\_/~~\\__/~~\\_/~~\\__/~~\\_______/~~\\_
/~~~~~~~~\\__/~~~~~~\\__/~~~~~~~\\___/~~~~~~\\___/~~~~~~\\__
_______________________________________________________""";
    Assert.assertEquals(expected,ASCIILogos.RELIEF.getVal());
}


@Test
public void TestREVERSE()
{
    String expected = """
======================================
=  ==================  ===============
=  ==================  ===============
=  ==================  ===============
=  ========  =  =====  ==  =  ===   ==
=  ========  =  ===    ==  =  ==  =  =
=  ========  =  ==  =  ==  =  ===  ===
=  ========  =  ==  =  ==  =  ====  ==
=  ========  =  ==  =  ==  =  ==  =  =
=        ===    ===    ===    ===   ==
======================================""";
    Assert.assertEquals(expected,ASCIILogos.REVERSE.getVal());
}


@Test
public void TestROMAN()
{
    String expected = """
ooooo                          .o8                       
`888'                         \"888                       
 888         oooo  oooo   .oooo888  oooo  oooo   .oooo.o 
 888         `888  `888  d88' `888  `888  `888  d88(  \"8 
 888          888   888  888   888   888   888  `\"Y88b.  
 888       o  888   888  888   888   888   888  o.  )88b 
o888ooooood8  `V88V\"V8P' `Y8bod88P\"  `V88V\"V8P' 8\"\"888P' 
                                                         
                                                         
                                                         """;
    Assert.assertEquals(expected,ASCIILogos.ROMAN.getVal());
}


@Test
public void TestSHADOW()
{
    String expected = """
  |                 |              
  |      |   |   _` |  |   |   __| 
  |      |   |  (   |  |   | \\__ \\ 
 _____| \\__,_| \\__,_| \\__,_| ____/ 
                                   """;
    Assert.assertEquals(expected,ASCIILogos.SHADOW.getVal());
}


@Test
public void TestSLANT()
{
    String expected = """
    __              __          
   / /   __  ______/ /_  _______
  / /   / / / / __  / / / / ___/
 / /___/ /_/ / /_/ / /_/ (__  ) 
/_____/\\__,_/\\__,_/\\__,_/____/  
                                """;
    Assert.assertEquals(expected,ASCIILogos.SLANT.getVal());
}


@Test
public void TestSMALL_POISON()
{
    String expected = """
                                            
@@@      @@@  @@@ @@@@@@@  @@@  @@@  @@@@@@ 
@@!      @@!  @@@ @@!  @@@ @@!  @@@ !@@     
@!!      @!@  !@! @!@  !@! @!@  !@!  !@@!!  
!!:      !!:  !!! !!:  !!! !!:  !!!     !:! 
: ::.: :  :.:: :  :: :  :   :.:: :  ::.: :  
                                            """;
    Assert.assertEquals(expected,ASCIILogos.SMALL_POISON.getVal());
}


@Test
public void TestSMALL_SCRIPT()
{
    String expected = """
                            
 \\_|)         _|         ,  
   |   |  |  / |  |  |  / \\_
  (\\__/ \\/|_/\\/|_/ \\/|_/ \\/ 
                            """;
    Assert.assertEquals(expected,ASCIILogos.SMALL_SCRIPT.getVal());
}


@Test
public void TestSMALL_SHADOW()
{
    String expected = """
  |               |            
  |     |  |   _` |  |  | (_-< 
 ____| \\_,_| \\__,_| \\_,_| ___/ 
                               """;
    Assert.assertEquals(expected,ASCIILogos.SMALL_SHADOW.getVal());
}


@Test
public void TestSOFT()
{
    String expected = """
                                      
,--.              ,--.                
|  |   ,--.,--. ,-|  |,--.,--. ,---.  
|  |   |  ||  |' .-. ||  ||  |(  .-'  
|  '--.'  ''  '\\ `-' |'  ''  '.-'  `) 
`-----' `----'  `---'  `----' `----'  
                                      """;
    Assert.assertEquals(expected,ASCIILogos.SOFT.getVal());
}


@Test
public void TestSMALL_SLANT()
{
    String expected = """
   __           __       
  / /  __ _____/ /_ _____
 / /__/ // / _  / // (_-<
/____/\\_,_/\\_,_/\\_,_/___/
                         """;
    Assert.assertEquals(expected,ASCIILogos.SMALL_SLANT.getVal());
}


@Test
public void TestSPEED()
{
    String expected = """
______        _________              
___  / ____  _______  /___  _________
__  /  _  / / /  __  /_  / / /_  ___/
_  /___/ /_/ // /_/ / / /_/ /_(__  ) 
/_____/\\__,_/ \\__,_/  \\__,_/ /____/  
                                     """;
    Assert.assertEquals(expected,ASCIILogos.SPEED.getVal());
}


@Test
public void TestSTAMPATELLO()
{
    String expected = """
 ,         .         
 )   . . ,-| . . ,-. 
/    | | | | | | `-. 
`--' `-^ `-^ `-^ `-' 
                     
                     """;
    Assert.assertEquals(expected,ASCIILogos.STAMPATELLO.getVal());
}


@Test
public void TestSMALL()
{
    String expected = """
  _           _         
 | |  _  _ __| |_  _ ___
 | |_| || / _` | || (_-<
 |____\\_,_\\__,_|\\_,_/__/
                        """;
    Assert.assertEquals(expected,ASCIILogos.SMALL.getVal());
}


@Test
public void TestSTAR_STRIPS()
{
    String expected = """
----         ----    ---- ----------   ----    ---- ------------ 
****         ****    **** ************ ****    **** ************ 
----         ----    ---- --        -- ----    ---- ----         
****         ****    **** **        ** ****    **** ************ 
----         ----    ---- --        -- ----    ---- ------------ 
************ ************ **        ** ************        ***** 
------------ ------------ ------------ ------------ ------------ 
************ ************ **********   ************ ************ 
                                                                 """;
    Assert.assertEquals(expected,ASCIILogos.STAR_STRIPS.getVal());
}


@Test
public void TestSTELLAR()
{
    String expected = """
`..                   `..               
`..                   `..               
`..      `..  `..     `..`..  `.. `.... 
`..      `..  `.. `.. `..`..  `..`..    
`..      `..  `..`.   `..`..  `..  `... 
`..      `..  `..`.   `..`..  `..    `..
`........  `..`.. `.. `..  `..`..`.. `..
                                        """;
    Assert.assertEquals(expected,ASCIILogos.STELLAR.getVal());
}


@Test
public void TestSWAMP_LAND()
{
    String expected = """
 __       __  __   ______   __  __   ______      
/_/\\     /_/\\/_/\\ /_____/\\ /_/\\/_/\\ /_____/\\     
\\:\\ \\    \\:\\ \\:\\ \\\\:::_ \\ \\\\:\\ \\:\\ \\\\::::_\\/_    
 \\:\\ \\    \\:\\ \\:\\ \\\\:\\ \\ \\ \\\\:\\ \\:\\ \\\\:\\/___/\\   
  \\:\\ \\____\\:\\ \\:\\ \\\\:\\ \\ \\ \\\\:\\ \\:\\ \\\\_::._\\:\\  
   \\:\\/___/\\\\:\\_\\:\\ \\\\:\\/.:| |\\:\\_\\:\\ \\ /____\\:\\ 
    \\_____\\/ \\_____\\/ \\____/_/ \\_____\\/ \\_____\\/ 
                                                 """;
    Assert.assertEquals(expected,ASCIILogos.SWAMP_LAND.getVal());
}


@Test
public void TestSWAN()
{
    String expected = """
                        
                        
.            .          
|            |          
|    .  . .-.| .  . .--.
|    |  |(   | |  | `--.
'---'`--`-`-'`-`--`-`--'
                        
                        """;
    Assert.assertEquals(expected,ASCIILogos.SWAN.getVal());
}


@Test
public void TestSWEET()
{
    String expected = """
 ___                  ___                         
(   )                (   )                        
 | |   ___  ___    .-.| |   ___  ___      .--.    
 | |  (   )(   )  /   \\ |  (   )(   )   /  _  \\   
 | |   | |  | |  |  .-. |   | |  | |   . .' `. ;  
 | |   | |  | |  | |  | |   | |  | |   | '   | |  
 | |   | |  | |  | |  | |   | |  | |   _\\_`.(___) 
 | |   | |  | |  | |  | |   | |  | |  (   ). '.   
 | |   | |  ; '  | '  | |   | |  ; '   | |  `\\ |  
 | |   ' `-'  /  ' `-'  /   ' `-'  /   ; '._,' '  
(___)   '.__.'    `.__,'     '.__.'     '.___.'   
                                                  
                                                  """;
    Assert.assertEquals(expected,ASCIILogos.SWEET.getVal());
}


@Test
public void TestTERM()
{
    String expected = """
Ludus""";
    Assert.assertEquals(expected,ASCIILogos.TERM.getVal());
}


@Test
public void TestTENGWAR()
{
    String expected = """
            dP\"Yb.                  dP\"Yb.            
            `b   'Yb                `b   'Yb          
                                                      
`Y8888888b.    'Yb   `Yb.d88b d88b     'Yb   .d888b.  
   .dP'         88    88'   8Y   8b     88   8'   `Yb 
 ,dP            88    88    8P   88     88   Yb.   88 
 88     .      .8P    88  ,dP  ,dP     .8P       .dP  
 `Yb...dP             88                       .dP'   
   `\"\"\"'              88                     .dP'     
                     .8P                              """;
    Assert.assertEquals(expected,ASCIILogos.TENGWAR.getVal());
}


@Test
public void TestTICKS()
{
    String expected = """
_/\\/\\__________________________/\\/\\_________________________
_/\\/\\________/\\/\\__/\\/\\________/\\/\\__/\\/\\__/\\/\\____/\\/\\/\\/\\_
_/\\/\\________/\\/\\__/\\/\\____/\\/\\/\\/\\__/\\/\\__/\\/\\__/\\/\\/\\/\\___
_/\\/\\________/\\/\\__/\\/\\__/\\/\\__/\\/\\__/\\/\\__/\\/\\________/\\/\\_
_/\\/\\/\\/\\/\\____/\\/\\/\\/\\____/\\/\\/\\/\\____/\\/\\/\\/\\__/\\/\\/\\/\\___
____________________________________________________________""";
    Assert.assertEquals(expected,ASCIILogos.TICKS.getVal());
}


@Test
public void TestTICKS_SLANT()
{
    String expected = """
     _/\\/\\__________________________/\\/\\_________________________
    _/\\/\\________/\\/\\__/\\/\\________/\\/\\__/\\/\\__/\\/\\____/\\/\\/\\/\\_ 
   _/\\/\\________/\\/\\__/\\/\\____/\\/\\/\\/\\__/\\/\\__/\\/\\__/\\/\\/\\/\\___  
  _/\\/\\________/\\/\\__/\\/\\__/\\/\\__/\\/\\__/\\/\\__/\\/\\________/\\/\\_   
 _/\\/\\/\\/\\/\\____/\\/\\/\\/\\____/\\/\\/\\/\\____/\\/\\/\\/\\__/\\/\\/\\/\\___    
____________________________________________________________     """;
    Assert.assertEquals(expected,ASCIILogos.TICKS_SLANT.getVal());
}


@Test
public void TestTILES()
{
    String expected = """
[..                   [..               
[..                   [..               
[..      [..  [..     [..[..  [.. [.... 
[..      [..  [.. [.. [..[..  [..[..    
[..      [..  [..[.   [..[..  [..  [... 
[..      [..  [..[.   [..[..  [..    [..
[........  [..[.. [.. [..  [..[..[.. [..
                                        """;
    Assert.assertEquals(expected,ASCIILogos.TILES.getVal());
}


@Test
public void TestTREK()
{
    String expected = """
     dBP    dBP dBP dBBBBb  dBP dBP.dBBBBP
                       dBP         BP     
   dBP    dBP dBP dBP dBP dBP dBP  `BBBBb 
  dBP    dBP_dBP dBP dBP dBP_dBP      dBP 
 dBBBBP dBBBBBP dBBBBBP dBBBBBP  dBBBBP'  
                                          """;
    Assert.assertEquals(expected,ASCIILogos.TREK.getVal());
}


@Test
public void TestTSALAGI()
{
    String expected = """
____           ___             __  
 |  \\   ,  |~,  |     ,  |~,  /  \\ 
 |__/  @|  |  (>|__  @|  |  __\\___ 
 |      |  /    | /   |  /      \\  
.|__     \\/     |/     \\/    \\__/  """;
    Assert.assertEquals(expected,ASCIILogos.TSALAGI.getVal());
}


@Test
public void TestTUBULAR()
{
    String expected = """
O~~                   O~~               
O~~                   O~~               
O~~      O~~  O~~     O~~O~~  O~~ O~~~~ 
O~~      O~~  O~~ O~~ O~~O~~  O~~O~~    
O~~      O~~  O~~O~   O~~O~~  O~~  O~~~ 
O~~      O~~  O~~O~   O~~O~~  O~~    O~~
O~~~~~~~~  O~~O~~ O~~ O~~  O~~O~~O~~ O~~
                                        """;
    Assert.assertEquals(expected,ASCIILogos.TUBULAR.getVal());
}


@Test
public void TestTWISTED()
{
    String expected = """
  __     __    __   _____    __    __   ______  
 /\\_\\   /\\_\\  /_/\\ /\\ __/\\  /\\_\\  /_/\\ / ____/\\ 
( ( (  ( ( (  ) ) )) )  \\ \\( ( (  ) ) )) ) __\\/ 
 \\ \\_\\  \\ \\ \\/ / // / /\\ \\ \\\\ \\ \\/ / /  \\ \\ \\   
 / / /__ \\ \\  / / \\ \\ \\/ / / \\ \\  / /   _\\ \\ \\  
( (_____(( (__) )  ) )__/ /  ( (__) )  )____) ) 
 \\/_____/ \\/__\\/   \\/___\\/    \\/__\\/   \\____\\/  
                                                """;
    Assert.assertEquals(expected,ASCIILogos.TWISTED.getVal());
}


@Test
public void TestVARSITY()
{
    String expected = """
  _____                   __                 
 |_   _|                 |  ]                
   | |     __   _    .--.| | __   _   .--.   
   | |   _[  | | | / /'`\\' |[  | | | ( (`\\]  
  _| |__/ || \\_/ |,| \\__/  | | \\_/ |, `'.'.  
 |________|'.__.'_/ '.__.;__]'.__.'_/[\\__) ) 
                                             """;
    Assert.assertEquals(expected,ASCIILogos.VARSITY.getVal());
}


@Test
public void TestUNIVERS()
{
    String expected = """
                                                              
88                                88                          
88                                88                          
88                                88                          
88          88       88   ,adPPYb,88  88       88  ,adPPYba,  
88          88       88  a8\"    `Y88  88       88  I8[    \"\"  
88          88       88  8b       88  88       88   `\"Y8ba,   
88          \"8a,   ,a88  \"8a,   ,d88  \"8a,   ,a88  aa    ]8I  
88888888888  `\"YbbdP'Y8   `\"8bbdP\"Y8   `\"YbbdP'Y8  `\"YbbdP\"'  
                                                              
                                                              """;
    Assert.assertEquals(expected,ASCIILogos.UNIVERS.getVal());
}


@Test
public void TestWAVY()
{
    String expected = """
                   
 )       _ )     _ 
(__ (_( (_( (_( (  
                _) """;
    Assert.assertEquals(expected,ASCIILogos.WAVY.getVal());
}


@Test
public void TestWHIMSY()
{
    String expected = """
 d8b                d8b                  
 88P                88P                  
d88                d88                   
888  ?88   d8P d888888  ?88   d8P .d888b,
?88  d88   88 d8P' ?88  d88   88  ?8b,   
 88b ?8(  d88 88b  ,88b ?8(  d88    `?8b 
  88b`?88P'?8b`?88P'`88b`?88P'?8b`?888P' 
                                         
                                         
                                         """;
    Assert.assertEquals(expected,ASCIILogos.WHIMSY.getVal());
}


@Test
public void TestACROBATIC()
{
    String expected = """
  o                                o                          
 <|>                              <|>                         
 / \\                              < \\                         
 \\o/           o       o     o__ __o/   o       o       __o__ 
  |           <|>     <|>   /v     |   <|>     <|>     />  \\  
 / \\          < >     < >  />     / \\  < >     < >     \\o     
 \\o/           |       |   \\      \\o/   |       |       v\\    
  |            o       o    o      |    o       o        <\\   
 / \\ _\\o__/_   <\\__ __/>    <\\__  / \\   <\\__ __/>   _\\o__</   
                                                              
                                                              
                                                              """;
    Assert.assertEquals(expected,ASCIILogos.ACROBATIC.getVal());
}


@Test
public void TestBIG_MONEY_SE()
{
    String expected = """
 __                       __                     
|  \\                     |  \\                    
| $$      __    __   ____| $$ __    __   _______ 
| $$     |  \\  |  \\ /      $$|  \\  |  \\ /       \\
| $$     | $$  | $$|  $$$$$$$| $$  | $$|  $$$$$$$
| $$     | $$  | $$| $$  | $$| $$  | $$ \\$$    \\ 
| $$_____| $$__/ $$| $$__| $$| $$__/ $$ _\\$$$$$$\\
| $$     \\\\$$    $$ \\$$    $$ \\$$    $$|       $$
 \\$$$$$$$$ \\$$$$$$   \\$$$$$$$  \\$$$$$$  \\$$$$$$$ 
                                                 
                                                 
                                                 """;
    Assert.assertEquals(expected,ASCIILogos.BIG_MONEY_SE.getVal());
}


@Test
public void TestBIG_MONEY_SW()
{
    String expected = """
 __                        __                     
/  |                      /  |                    
$$ |       __    __   ____$$ | __    __   _______ 
$$ |      /  |  /  | /    $$ |/  |  /  | /       |
$$ |      $$ |  $$ |/$$$$$$$ |$$ |  $$ |/$$$$$$$/ 
$$ |      $$ |  $$ |$$ |  $$ |$$ |  $$ |$$      \\ 
$$ |_____ $$ \\__$$ |$$ \\__$$ |$$ \\__$$ | $$$$$$  |
$$       |$$    $$/ $$    $$ |$$    $$/ /     $$/ 
$$$$$$$$/  $$$$$$/   $$$$$$$/  $$$$$$/  $$$$$$$/  
                                                  
                                                  
                                                  """;
    Assert.assertEquals(expected,ASCIILogos.BIG_MONEY_SW.getVal());
}


@Test
public void TestBLOCK()
{
    String expected = """
                                                   
 _|                        _|                      
 _|        _|    _|    _|_|_|  _|    _|    _|_|_|  
 _|        _|    _|  _|    _|  _|    _|  _|_|      
 _|        _|    _|  _|    _|  _|    _|      _|_|  
 _|_|_|_|    _|_|_|    _|_|_|    _|_|_|  _|_|_|    
                                                   
                                                   """;
    Assert.assertEquals(expected,ASCIILogos.BLOCK.getVal());
}


@Test
public void TestBUBBLE()
{
    String expected = """
   _   _   _   _   _  
  / \\ / \\ / \\ / \\ / \\ 
 ( L | u | d | u | s )
  \\_/ \\_/ \\_/ \\_/ \\_/ """;
    Assert.assertEquals(expected,ASCIILogos.BUBBLE.getVal());
}


@Test
public void TestCALIGRAPHYTWO()
{
    String expected = """
                                                                 
     ##### /                        ##                           
  ######  /                          ##                          
 /#   /  /                           ##                          
/    /  /                            ##                          
    /  /                             ##                          
   ## ##          ##   ####      ### ##  ##   ####       /###    
   ## ##           ##    ###  / ######### ##    ###  /  / #### / 
   ## ##           ##     ###/ ##   ####  ##     ###/  ##  ###/  
   ## ##           ##      ##  ##    ##   ##      ##  ####       
   ## ##           ##      ##  ##    ##   ##      ##    ###      
   #  ##           ##      ##  ##    ##   ##      ##      ###    
      /            ##      ##  ##    ##   ##      ##        ###  
  /##/           / ##      /#  ##    /#   ##      /#   /###  ##  
 /  ############/   ######/ ##  ####/      ######/ ## / #### /   
/     #########      #####   ##  ###        #####   ##   ###/    
#                                                                
 ##                                                              
                                                                 
                                                                 """;
    Assert.assertEquals(expected,ASCIILogos.CALIGRAPHYTWO.getVal());
}


@Test
public void TestCALIGRAPHY()
{
    String expected = """
                                                                     
     ***** *                          **                             
  ******  *                            **                            
 **   *  *                             **                            
*    *  *                              **                            
    *  *           **   ****           **   **   ****        ****    
   ** **            **    ***  *   *** **    **    ***  *   * **** * 
   ** **            **     ****   *********  **     ****   **  ****  
   ** **            **      **   **   ****   **      **   ****       
   ** **            **      **   **    **    **      **     ***      
   ** **            **      **   **    **    **      **       ***    
   *  **            **      **   **    **    **      **         ***  
      *             **      **   **    **    **      **    ****  **  
  ****           *   ******* **  **    **     ******* **  * **** *   
 *  *************     *****   **  *****        *****   **    ****    
*     *********                    ***                               
*                                                                    
 **                                                                  
                                                                     
                                                                     
                                                                     """;
    Assert.assertEquals(expected,ASCIILogos.CALIGRAPHY.getVal());
}


@Test
public void TestCRAZY()
{
    String expected = """
                                                 
.---.          _______                           
|   |          \\  ___ `'.                        
|   |           ' |--.\\  \\                       
|   |           | |    \\  '                      
|   |           | |     |  '                     
|   |   _    _  | |     |  | _    _         _    
|   |  | '  / | | |     ' .'| '  / |      .' |   
|   | .' | .' | | |___.' /'.' | .' |     .   | / 
|   | /  | /  |/_______.'/ /  | /  |   .'.'| |// 
'---'|   `'.  |\\_______|/ |   `'.  | .'.'.-'  /  
     '   .'|  '/          '   .'|  '/.'   \\_.'   
      `-'  `--'            `-'  `--'             """;
    Assert.assertEquals(expected,ASCIILogos.CRAZY.getVal());
}


@Test
public void TestDOT_MATRIX()
{
    String expected = """
    _                                      _                                
   (_)                                    (_)                               
   (_)            _         _     _  _  _ (_) _         _    _  _  _  _     
   (_)           (_)       (_)  _(_)(_)(_)(_)(_)       (_) _(_)(_)(_)(_)    
   (_)           (_)       (_) (_)        (_)(_)       (_)(_)_  _  _  _     
   (_)           (_)       (_) (_)        (_)(_)       (_)  (_)(_)(_)(_)_   
   (_) _  _  _  _(_)_  _  _(_)_(_)_  _  _ (_)(_)_  _  _(_)_  _  _  _  _(_)  
   (_)(_)(_)(_)(_) (_)(_)(_) (_) (_)(_)(_)(_)  (_)(_)(_) (_)(_)(_)(_)(_)    
                                                                            
                                                                            """;
    Assert.assertEquals(expected,ASCIILogos.DOT_MATRIX.getVal());
}


@Test
public void TestHOLLYWOOD()
{
    String expected = """
              _                                   
            /~_)                   /'             
        ~-/'-~                   /'               
        /'               _____,/'          ____   
      /'      /'    /  /'    /' /'    /  /'    )--
 /~\\,'   _  /'    /' /'    /' /'    /'  '---,     
(,/'`\\____)(___,/(__(___,/(__(___,/(__(___,/      
                                                  
                                                  
                                                  """;
    Assert.assertEquals(expected,ASCIILogos.HOLLYWOOD.getVal());
}


@Test
public void TestIMPOSSIBLE()
{
    String expected = """
         _       _                  _          _                  _        
        _\\ \\    /\\_\\               /\\ \\       /\\_\\               / /\\      
       /\\__ \\  / / /         _    /  \\ \\____ / / /         _    / /  \\     
      / /_ \\_\\ \\ \\ \\__      /\\_\\ / /\\ \\_____\\\\ \\ \\__      /\\_\\ / / /\\ \\__  
     / / /\\/_/  \\ \\___\\    / / // / /\\/___  / \\ \\___\\    / / // / /\\ \\___\\ 
    / / /        \\__  /   / / // / /   / / /   \\__  /   / / / \\ \\ \\ \\/___/ 
   / / /         / / /   / / // / /   / / /    / / /   / / /   \\ \\ \\       
  / / / ____    / / /   / / // / /   / / /    / / /   / / /_    \\ \\ \\      
 / /_/_/ ___/\\ / / /___/ / / \\ \\ \\__/ / /    / / /___/ / //_/\\__/ / /      
/_______/\\__\\// / /____\\/ /   \\ \\___\\/ /    / / /____\\/ / \\ \\/___/ /       
\\_______\\/    \\/_________/     \\/_____/     \\/_________/   \\_____\\/        
                                                                           """;
    Assert.assertEquals(expected,ASCIILogos.IMPOSSIBLE.getVal());
}


@Test
public void TestNV_SCRIPT()
{
    String expected = """
       ,gggg,                                                
      d8\" \"8I                       8I                       
      88  ,dP                       8I                       
   8888888P\"                        8I                       
      88                            8I                       
      88        gg      gg    ,gggg,8I  gg      gg    ,g,    
 ,aa,_88        I8      8I   dP\"  \"Y8I  I8      8I   ,8'8,   
dP\" \"88P        I8,    ,8I  i8'    ,8I  I8,    ,8I  ,8'  Yb  
Yb,_,d88b,,_   ,d8b,  ,d8b,,d8,   ,d8b,,d8b,  ,d8b,,8'_   8) 
 \"Y8P\"  \"Y888888P'\"Y88P\"`Y8P\"Y8888P\"`Y88P'\"Y88P\"`Y8P' \"YY8P8P
                                                             
                                                             
                                                             
                                                             
                                                             
                                                             """;
    Assert.assertEquals(expected,ASCIILogos.NV_SCRIPT.getVal());
}


@Test
public void TestPATORJK_HEX()
{
    String expected = """
                                                                                      
 _____          ______   _____     ____________ ______   _____                _____   
|\\    \\         \\     \\  \\    \\    \\           \\\\     \\  \\    \\          _____\\    \\  
 \\\\    \\         \\    |  |    |     \\           \\\\    |  |    |         /    / \\    | 
  \\\\    \\         |   |  |    |      |    /\\     ||   |  |    |        |    |  /___/| 
   \\|    | ______ |    \\_/   /|      |   |  |    ||    \\_/   /|     ____\\    \\ |   || 
    |    |/      \\|\\         \\|      |    \\/     ||\\         \\|    /    /\\    \\|___|/ 
    /            || \\         \\__   /           /|| \\         \\__ |    |/ \\    \\      
   /_____/\\_____/| \\ \\_____/\\    \\ /___________/ | \\ \\_____/\\    \\|\\____\\ /____/|     
  |      | |    ||  \\ |    |/___/||           | /   \\ |    |/___/|| |   ||    | |     
  |______|/|____|/   \\|____|   | ||___________|/     \\|____|   | | \\|___||____|/      
                           |___|/                          |___|/                     """;
    Assert.assertEquals(expected,ASCIILogos.PATORJK_HEX.getVal());
}


@Test
public void TestSCRIPT()
{
    String expected = """
    _                           
 \\_|_)            |             
   |            __|          ,  
  _|    |   |  /  |  |   |  / \\_
 (/\\___/ \\_/|_/\\_/|_/ \\_/|_/ \\/ 
                                
                                """;
    Assert.assertEquals(expected,ASCIILogos.SCRIPT.getVal());
}


@Test
public void TestSLANT_RELIEF()
{
    String expected = """
__/\\\\\\___________________________________/\\\\\\_____________________________        
 _\\/\\\\\\__________________________________\\/\\\\\\_____________________________       
  _\\/\\\\\\__________________________________\\/\\\\\\_____________________________      
   _\\/\\\\\\______________/\\\\\\____/\\\\\\________\\/\\\\\\___/\\\\\\____/\\\\\\__/\\\\\\\\\\\\\\\\\\\\_     
    _\\/\\\\\\_____________\\/\\\\\\___\\/\\\\\\___/\\\\\\\\\\\\\\\\\\__\\/\\\\\\___\\/\\\\\\_\\/\\\\\\//////__    
     _\\/\\\\\\_____________\\/\\\\\\___\\/\\\\\\__/\\\\\\////\\\\\\__\\/\\\\\\___\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\_   
      _\\/\\\\\\_____________\\/\\\\\\___\\/\\\\\\_\\/\\\\\\__\\/\\\\\\__\\/\\\\\\___\\/\\\\\\_\\////////\\\\\\_  
       _\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\//\\\\\\\\\\\\\\\\\\__\\//\\\\\\\\\\\\\\/\\\\_\\//\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\\\\\\\\\_ 
        _\\///////////////___\\/////////____\\///////\\//___\\/////////___\\//////////__""";
    Assert.assertEquals(expected,ASCIILogos.SLANT_RELIEF.getVal());
}


@Test
public void TestTHREED_DIAGONAL()
{
    String expected = """
   ,--,                                                      
,---.'|                                                      
|   | :                                                      
:   : |                      ,---,                           
|   ' :            ,--,    ,---.'|         ,--,              
;   ; '          ,'_ /|    |   | :       ,'_ /|   .--.--.    
'   | |__   .--. |  | :    |   | |  .--. |  | :  /  /    '   
|   | :.'|,'_ /| :  . |  ,--.__| |,'_ /| :  . | |  :  /`./   
'   :    ;|  ' | |  . . /   ,'   ||  ' | |  . . |  :  ;_     
|   |  ./ |  | ' |  | |.   '  /  ||  | ' |  | |  \\  \\    `.  
;   : ;   :  | : ;  ; |'   ; |:  |:  | : ;  ; |   `----.   \\ 
|   ,/    '  :  `--'   \\   | '/  ''  :  `--'   \\ /  /`--'  / 
'---'     :  ,      .-./   :    :|:  ,      .-./'--'.     /  
           `--`----'    \\   \\  /   `--`----'      `--'---'   
                         `----'                              
                                                             """;
    Assert.assertEquals(expected,ASCIILogos.THREED_DIAGONAL.getVal());
}


@Test
public void TestBLOCKS()
{
    String expected = """
 .----------------.  .----------------.  .----------------.  .----------------.  .----------------. 
| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |
| |   _____      | || | _____  _____ | || |  ________    | || | _____  _____ | || |    _______   | |
| |  |_   _|     | || ||_   _||_   _|| || | |_   ___ `.  | || ||_   _||_   _|| || |   /  ___  |  | |
| |    | |       | || |  | |    | |  | || |   | |   `. \\ | || |  | |    | |  | || |  |  (__ \\_|  | |
| |    | |   _   | || |  | '    ' |  | || |   | |    | | | || |  | '    ' |  | || |   '.___`-.   | |
| |   _| |__/ |  | || |   \\ `--' /   | || |  _| |___.' / | || |   \\ `--' /   | || |  |`\\____) |  | |
| |  |________|  | || |    `.__.'    | || | |________.'  | || |    `.__.'    | || |  |_______.'  | |
| |              | || |              | || |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'  '----------------'  '----------------' """;
    Assert.assertEquals(expected,ASCIILogos.BLOCKS.getVal());
}


@Test
public void TestBIG()
{
    String expected = """
  _               _           
 | |             | |          
 | |    _   _  __| |_   _ ___ 
 | |   | | | |/ _` | | | / __|
 | |___| |_| | (_| | |_| \\__ \\
 |______\\__,_|\\__,_|\\__,_|___/
                              
                              """;
    Assert.assertEquals(expected,ASCIILogos.BIG.getVal());
}


@Test
public void TestDOS_REBEL()
{
    String expected = """
 █████                      █████                   
░░███                      ░░███                    
 ░███        █████ ████  ███████  █████ ████  █████ 
 ░███       ░░███ ░███  ███░░███ ░░███ ░███  ███░░  
 ░███        ░███ ░███ ░███ ░███  ░███ ░███ ░░█████ 
 ░███      █ ░███ ░███ ░███ ░███  ░███ ░███  ░░░░███
 ███████████ ░░████████░░████████ ░░████████ ██████ 
░░░░░░░░░░░   ░░░░░░░░  ░░░░░░░░   ░░░░░░░░ ░░░░░░  
                                                    
                                                    
                                                    """;
    Assert.assertEquals(expected,ASCIILogos.DOS_REBEL.getVal());
}


@Test
public void TestELECTRONIC()
{
    String expected = """
 ▄            ▄         ▄  ▄▄▄▄▄▄▄▄▄▄   ▄         ▄  ▄▄▄▄▄▄▄▄▄▄▄ 
▐░▌          ▐░▌       ▐░▌▐░░░░░░░░░░▌ ▐░▌       ▐░▌▐░░░░░░░░░░░▌
▐░▌          ▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀▀▀ 
▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          
▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄▄▄ 
▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌
▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌ ▀▀▀▀▀▀▀▀▀█░▌
▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌          ▐░▌
▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌ ▄▄▄▄▄▄▄▄▄█░▌
▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
 ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀ 
                                                                 """;
    Assert.assertEquals(expected,ASCIILogos.ELECTRONIC.getVal());
}


@Test
public void TestFRAKTUR()
{
    String expected = """
      ...                        ..                         .x+=:.   
  .zf\"` `\"tu                   dF                          z`    ^%  
 x88      '8N.    x.    .     '88bu.         x.    .          .   <k 
 888k     d88&  .@88k  z88u   '*88888bu    .@88k  z88u      .@8Ned8\" 
 8888N.  @888F ~\"8888 ^8888     ^\"*8888N  ~\"8888 ^8888    .@^%8888\"  
 `88888 9888%    8888  888R    beWE \"888L   8888  888R   x88:  `)8b. 
   %888 \"88F     8888  888R    888E  888E   8888  888R   8888N=*8888 
    8\"   \"*h=~   8888  888R    888E  888E   8888  888R    %8\"    R88 
  z8Weu          8888 ,888B .  888E  888F   8888 ,888B .   @8Wou 9%  
 \"\"88888i.   Z  \"8888Y 8888\"  .888N..888   \"8888Y 8888\"  .888888P`   
\"   \"8888888*    `Y\"   'YP     `\"888*\"\"     `Y\"   'YP    `   ^\"F     
      ^\"**\"\"                      \"\"                                 
                                                                     
                                                                     
                                                                     """;
    Assert.assertEquals(expected,ASCIILogos.FRAKTUR.getVal());
}


@Test
public void TestLEAN()
{
    String expected = """
                                                      
    _/                        _/                      
   _/        _/    _/    _/_/_/  _/    _/    _/_/_/   
  _/        _/    _/  _/    _/  _/    _/  _/_/        
 _/        _/    _/  _/    _/  _/    _/      _/_/     
_/_/_/_/    _/_/_/    _/_/_/    _/_/_/  _/_/_/        
                                                      
                                                      """;
    Assert.assertEquals(expected,ASCIILogos.LEAN.getVal());
}


@Test
public void TestNSCRIPT()
{
    String expected = """
       ,gggg,                                                
      d8\" \"8I                       8I                       
      88  ,dP                       8I                       
   8888888P\"                        8I                       
      88                            8I                       
      88        gg      gg    ,gggg,8I  gg      gg    ,g,    
 ,aa,_88        I8      8I   dP\"  \"Y8I  I8      8I   ,8'8,   
dP\" \"88P        I8,    ,8I  i8'    ,8I  I8,    ,8I  ,8'  Yb  
Yb,_,d88b,,_   ,d8b,  ,d8b,,d8,   ,d8b,,d8b,  ,d8b,,8'_   8) 
 \"Y8P\"  \"Y888888P'\"Y88P\"`Y8P\"Y8888P\"`Y88P'\"Y88P\"`Y8P' \"YY8P8P
                                                             
                                                             
                                                             
                                                             
                                                             
                                                             """;
    Assert.assertEquals(expected,ASCIILogos.NSCRIPT.getVal());
}


@Test
public void TestSTANDARD()
{
    String expected = """
  _              _           
 | |   _   _  __| |_   _ ___ 
 | |  | | | |/ _` | | | / __|
 | |__| |_| | (_| | |_| \\__ \\
 |_____\\__,_|\\__,_|\\__,_|___/
                             """;
    Assert.assertEquals(expected,ASCIILogos.STANDARD.getVal());
}


@Test
public void TestALPHA()
{
    String expected = """
          _____            _____                    _____                    _____                    _____          
         /\\    \\          /\\    \\                  /\\    \\                  /\\    \\                  /\\    \\         
        /::\\____\\        /::\\____\\                /::\\    \\                /::\\____\\                /::\\    \\        
       /:::/    /       /:::/    /               /::::\\    \\              /:::/    /               /::::\\    \\       
      /:::/    /       /:::/    /               /::::::\\    \\            /:::/    /               /::::::\\    \\      
     /:::/    /       /:::/    /               /:::/\\:::\\    \\          /:::/    /               /:::/\\:::\\    \\     
    /:::/    /       /:::/    /               /:::/  \\:::\\    \\        /:::/    /               /:::/__\\:::\\    \\    
   /:::/    /       /:::/    /               /:::/    \\:::\\    \\      /:::/    /                \\:::\\   \\:::\\    \\   
  /:::/    /       /:::/    /      _____    /:::/    / \\:::\\    \\    /:::/    /      _____    ___\\:::\\   \\:::\\    \\  
 /:::/    /       /:::/____/      /\\    \\  /:::/    /   \\:::\\ ___\\  /:::/____/      /\\    \\  /\\   \\:::\\   \\:::\\    \\ 
/:::/____/       |:::|    /      /::\\____\\/:::/____/     \\:::|    ||:::|    /      /::\\____\\/::\\   \\:::\\   \\:::\\____\\
\\:::\\    \\       |:::|____\\     /:::/    /\\:::\\    \\     /:::|____||:::|____\\     /:::/    /\\:::\\   \\:::\\   \\::/    /
 \\:::\\    \\       \\:::\\    \\   /:::/    /  \\:::\\    \\   /:::/    /  \\:::\\    \\   /:::/    /  \\:::\\   \\:::\\   \\/____/ 
  \\:::\\    \\       \\:::\\    \\ /:::/    /    \\:::\\    \\ /:::/    /    \\:::\\    \\ /:::/    /    \\:::\\   \\:::\\    \\     
   \\:::\\    \\       \\:::\\    /:::/    /      \\:::\\    /:::/    /      \\:::\\    /:::/    /      \\:::\\   \\:::\\____\\    
    \\:::\\    \\       \\:::\\__/:::/    /        \\:::\\  /:::/    /        \\:::\\__/:::/    /        \\:::\\  /:::/    /    
     \\:::\\    \\       \\::::::::/    /          \\:::\\/:::/    /          \\::::::::/    /          \\:::\\/:::/    /     
      \\:::\\    \\       \\::::::/    /            \\::::::/    /            \\::::::/    /            \\::::::/    /      
       \\:::\\____\\       \\::::/    /              \\::::/    /              \\::::/    /              \\::::/    /       
        \\::/    /        \\::/____/                \\::/____/                \\::/____/                \\::/    /        
         \\/____/          ~~                       ~~                       ~~                       \\/____/         
                                                                                                                     """;
    Assert.assertEquals(expected,ASCIILogos.ALPHA.getVal());
}


@Test
public void TestBANNER()
{
    String expected = """
 #                                   
 #       #    # #####  #    #  ####  
 #       #    # #    # #    # #      
 #       #    # #    # #    #  ####  
 #       #    # #    # #    #      # 
 #       #    # #    # #    # #    # 
 #######  ####  #####   ####   ####  
                                     """;
    Assert.assertEquals(expected,ASCIILogos.BANNER.getVal());
}


@Test
public void TestDOH()
{
    String expected = """
                                                                                                 
                                                      dddddddd                                   
LLLLLLLLLLL                                           d::::::d                                   
L:::::::::L                                           d::::::d                                   
L:::::::::L                                           d::::::d                                   
LL:::::::LL                                           d:::::d                                    
  L:::::L               uuuuuu    uuuuuu      ddddddddd:::::d uuuuuu    uuuuuu      ssssssssss   
  L:::::L               u::::u    u::::u    dd::::::::::::::d u::::u    u::::u    ss::::::::::s  
  L:::::L               u::::u    u::::u   d::::::::::::::::d u::::u    u::::u  ss:::::::::::::s 
  L:::::L               u::::u    u::::u  d:::::::ddddd:::::d u::::u    u::::u  s::::::ssss:::::s
  L:::::L               u::::u    u::::u  d::::::d    d:::::d u::::u    u::::u   s:::::s  ssssss 
  L:::::L               u::::u    u::::u  d:::::d     d:::::d u::::u    u::::u     s::::::s      
  L:::::L               u::::u    u::::u  d:::::d     d:::::d u::::u    u::::u        s::::::s   
  L:::::L         LLLLLLu:::::uuuu:::::u  d:::::d     d:::::d u:::::uuuu:::::u  ssssss   s:::::s 
LL:::::::LLLLLLLLL:::::Lu:::::::::::::::uud::::::ddddd::::::ddu:::::::::::::::uus:::::ssss::::::s
L::::::::::::::::::::::L u:::::::::::::::u d:::::::::::::::::d u:::::::::::::::us::::::::::::::s 
L::::::::::::::::::::::L  uu::::::::uu:::u  d:::::::::ddd::::d  uu::::::::uu:::u s:::::::::::ss  
LLLLLLLLLLLLLLLLLLLLLLLL    uuuuuuuu  uuuu   ddddddddd   ddddd    uuuuuuuu  uuuu  sssssssssss    
                                                                                                 
                                                                                                 
                                                                                                 
                                                                                                 
                                                                                                 
                                                                                                 
                                                                                                 """;
    Assert.assertEquals(expected,ASCIILogos.DOH.getVal());
}


@Test
public void TestGEORGIONESIX()
{
    String expected = """
                                              
                                              
____                   ___                    
`MM'                   `MM                    
 MM                     MM                    
 MM     ___   ___   ____MM ___   ___   ____   
 MM     `MM    MM  6MMMMMM `MM    MM  6MMMMb\\ 
 MM      MM    MM 6M'  `MM  MM    MM MM'    ` 
 MM      MM    MM MM    MM  MM    MM YM.      
 MM      MM    MM MM    MM  MM    MM  YMMMMb  
 MM      MM    MM MM    MM  MM    MM      `Mb 
 MM    / YM.   MM YM.  ,MM  YM.   MM L    ,MM 
_MMMMMMM  YMMM9MM_ YMMMMMM_  YMMM9MM_MYMMMM9  
                                              
                                              
                                              """;
    Assert.assertEquals(expected,ASCIILogos.GEORGIONESIX.getVal());
}


@Test
public void TestGEORGIAONEONE()
{
    String expected = """
                                                   
                            ,,                     
`7MMF'                    `7MM                     
  MM                        MM                     
  MM      `7MM  `7MM   ,M\"\"bMM `7MM  `7MM  ,pP\"Ybd 
  MM        MM    MM ,AP    MM   MM    MM  8I   `\" 
  MM      , MM    MM 8MI    MM   MM    MM  `YMMMa. 
  MM     ,M MM    MM `Mb    MM   MM    MM  L.   I8 
.JMMmmmmMMM `Mbod\"YML.`Wbmd\"MML. `Mbod\"YML.M9mmmP' 
                                                   
                                                   """;
    Assert.assertEquals(expected,ASCIILogos.GEORGIAONEONE.getVal());
}


@Test
public void TestMNEMONIC()
{
    String expected = """
Ludus""";
    Assert.assertEquals(expected,ASCIILogos.MNEMONIC.getVal());
}


@Test
public void TestDEF_LEPPARD()
{
    String expected = """
                        ;                           
                        ED.                         
                 :      E#Wi         :             .
             i   Ef     E###G.       Ef           ;W
            LE   E#t    E#fD#W;      E#t         f#E
           L#E   E#t    E#t t##L     E#t       .E#f 
          G#W.   E#t    E#t  .E#K,   E#t      iWW;  
         D#K.    E#t fi E#t    j##f  E#t fi  L##Lffi
        E#K.     E#t L#jE#t    :E#K: E#t L#jtLLG##L 
      .E#E.      E#t L#LE#t   t##L   E#t L#L  ,W#i  
     .K#E        E#tf#E:E#t .D#W;    E#tf#E: j#E.   
    .K#D         E###f  E#tiW#G.     E###f .D#j     
   .W#G          E#K,   E#K##i       E#K, ,WK,      
  :W##########Wt EL     E##D.        EL   EG.       
  :,,,,,,,,,,,,,.:      E#t          :    ,         
                        L:                          """;
    Assert.assertEquals(expected,ASCIILogos.DEF_LEPPARD.getVal());
}


}

